{"attachments":{"elif_diagram.png":{"type":"sha1","value":"1274c6402c933cbd7057347e722dc86e41b275ab"}},"cell_type":"markdown","id":"cb00d8","input":"Our task now is to write Python code that has the following flow of execution:\n![elif_diagram.png](attachment:elif_diagram.png)","metadata":{"colab_type":"text","id":"a-j8Mu3OSCng"},"pos":39,"type":"cell"}
{"attachments":{"ifelse_diagram.png":{"type":"sha1","value":"4f6cf6b79c9db98a94ad53fa5f6946f63dfd08d5"}},"cell_type":"markdown","id":"e19df4","input":"There are other types of statements in Python too!\n\nSometimes we wish to execute some lines of code only if a condition is satisfied. **If statements** can help us with that. An **if statement** has the syntax as follows:\n```\nif [BOOLEAN EXPRESSION]: \n    [STATEMENT 1]\nelse: \n    [STATEMENT 2]\n```\n\nRecall that boolean expressions are expressions that evaluate to boolean values (`True` or `False`). If the boolean expression evaluates to `True`, `STATEMENT 1` will be executed. If the boolean expression evaluates to `False`, `STATEMENT 2` will be executed. The diagram below depicts this flow of execution:\n![ifelse_diagram.png](attachment:ifelse_diagram.png)\n\nSeveral things to notice about the syntax:\n* There are colons at the end of the lines that contain `if` and `else`\n* The lines `STATEMENT 1` and `STATEMENT 2` have to be indented.\n\nThe cell below is the code to check whether a number `a` is larger than 5 and prints out a message accordingly.","metadata":{"colab_type":"text","id":"j8_-iKlWmXsA"},"pos":27,"type":"cell"}
{"attachments":{"pyramid2.png":{"type":"sha1","value":"a6d4b439e975e9e9b40d37949169a6a5d5e7e69d"},"pyramid50.png":{"type":"sha1","value":"8a483dae544e417c7b54cf883ff99fe9575ae30e"},"pyramid6.png":{"type":"sha1","value":"fd7964b259ee56d0f2abc460dab1981d6fc62ef4"}},"cell_type":"markdown","id":"ca4fc3","input":"Create a function `build_even_pyramid` which receives a positive integer `n` as an argument and prints a pyramid of that level if `n` is even, and prints `\"n is not even\"` otherwise. For example,\n`build_even_pyramid(2)` should print:\n![pyramid2.png](attachment:pyramid2.png)\n\n`build_even_pyramid(6)` should print:\n![pyramid6.png](attachment:pyramid6.png)\n\n`build_even_pyramid(50)` should print:\n![pyramid50.png](attachment:pyramid50.png)\n\n`build_even_pyramid(3)` should print:\n`n is not even`","metadata":{"colab_type":"text","id":"MC2XwKl_FVme"},"pos":86,"type":"cell"}
{"attachments":{"welcome%20back.gif":{"type":"sha1","value":"9eefe6f544771f24d377671d392c8e57b9aec41d"}},"cell_type":"markdown","id":"fbc9b9","input":"\n![welcome%20back.gif](https://media.giphy.com/media/l1J9urAfGd3grKV6E/giphy.gif)","metadata":{"colab_type":"text","id":"fdwHjFyemXrw"},"pos":2,"type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80764928},"metadata":{"colab":{"name":"SSS2.ipynb","provenance":[],"version":"0.3.2"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"type":"settings"}
{"cell_type":"code","id":"0a7ef0","input":"students_grade = 2.7\nif students_grade <= 2.5:\n    print(\"This student needs more academic support.\")","metadata":{"colab":{},"colab_type":"code","id":"EHc_-hGumXsJ"},"pos":36,"type":"cell"}
{"cell_type":"code","id":"0faae8","input":"#use this cell to check the data type of '14'","pos":26,"type":"cell"}
{"cell_type":"code","id":"110d8d","input":"import zlib, base64\nexec(zlib.decompress(base64.b64decode('eJx1kEFLAzEQhe/5Fa97UoRiD14WiqdqC9Kj4Kmk2dk1MsksmaS6/96sKwiit4E37/uGGVjOlsEymGEZ1Ukik9PUGvgezcPu7raBjwjTKfhI6WJPjq0qad1AIFU70LbZrPHkNWuLR5EOb3JeNTX/wt1sNwbESv80XqQkcJ3htaqchJEp09xP1ivh2XKhXUqSrr7r14Y+HI0ZRxuWpLL/QB8lo5cSuxX29kKYpCCVCMsMR8yKd59fpWTQDLmvzkVZi4f5jEAxU/fL3ftYAVNb/7a240ix+8k+AaKgcx4=')))","metadata":{"nbgrader":{"grade":true,"grade_id":"110d8d","locked":true,"points":1,"schema_version":1,"solution":false}},"pos":98,"type":"cell"}
{"cell_type":"code","id":"144efd","input":"import math\nprint(math.factorial(52))","metadata":{"colab":{},"colab_type":"code","id":"G3gc0dwXmXr3","outputId":"663c052f-a412-421c-c263-f495fadd8a08"},"pos":9,"type":"cell"}
{"cell_type":"code","id":"2608a0","input":"my_minerva_classes.append(\"FE50\")\nprint(my_minerva_classes)","pos":20,"type":"cell"}
{"cell_type":"code","id":"28b9ce","input":"print('John')\nprint('Katie')\nprint('Tom')","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":698,"status":"ok","timestamp":1534446286390,"user":{"displayName":"Quang Tran","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"103528044432244998451"},"user_tz":-420},"id":"r8lLpxkFIBWi","outputId":"48ab69dd-eca9-411b-8560-561e8ef00c5b"},"pos":53,"type":"cell"}
{"cell_type":"code","id":"2a9034","input":"# for item in ['a','b','c','d','e','f','g','h']:\n#     print('Hello')","metadata":{"colab":{},"colab_type":"code","id":"3qSlq6D0IMKd"},"pos":61,"type":"cell"}
{"cell_type":"code","id":"3269bf","input":"print(24*19*60**2)","metadata":{"colab":{},"colab_type":"code","id":"dJ-0gIT2mXrz","outputId":"8399e0d9-17c4-4ff6-98e0-4aae30c20e1c"},"pos":6,"type":"cell"}
{"cell_type":"code","id":"35a1c1","input":"for natural_number in range(50):\n    print(natural_number)","metadata":{"colab":{},"colab_type":"code","id":"kQkdqSQ2Ir3m","outputId":"a7e4926a-50ab-4870-be6f-033933fe6fb7"},"pos":65,"type":"cell"}
{"cell_type":"code","id":"3a9d73","input":"# Write code here to test out your answer","pos":46,"type":"cell"}
{"cell_type":"code","id":"3e23ea","input":"print(\"Hi\")","pos":87,"type":"cell"}
{"cell_type":"code","id":"3e5598","input":"a = 6\nif a > 5:\n    print(\"Larger than 5\")\nelse:\n    print(\"Not larger than 5\")","metadata":{"colab":{},"colab_type":"code","id":"uYzAAQ9rmXsA","outputId":"e0b91eb0-6763-405a-a406-e1f6fc8ef9cd"},"pos":28,"type":"cell"}
{"cell_type":"code","id":"401e7c","input":"# if 1:\n#     print('1 means True')\n# else:\n#     print('1 means False')","metadata":{"colab":{},"colab_type":"code","id":"C0bioN9LmXsF"},"pos":33,"type":"cell"}
{"cell_type":"code","id":"404879","input":"day = 'Sunday'\nif day=='Monday' or day=='Tuesday' or day=='Wednesday' or day=='Thursday':\n    print('Getting bored')\nelif day=='Friday':\n    print('Partying')\nelif day=='Saturday':\n    print('Picnicking')\nelse:\n    print('Preparing to get bored')","metadata":{"colab":{},"colab_type":"code","id":"wno0P4FpSCnh","outputId":"2e775c3e-d66f-4b18-fab8-7e40435086c5"},"pos":42,"type":"cell"}
{"cell_type":"code","id":"500ab0","input":"print(\"this is a print statement\")\nprint('14') ","metadata":{"colab":{},"colab_type":"code","id":"E6rxIfrlmXr9","outputId":"fa3fe029-1795-4048-9da2-fc338501fd73"},"pos":24,"type":"cell"}
{"cell_type":"code","id":"54ef53","input":"if 'CS51' in my_minerva_classes: #checks if there is 'CS51' in a list. \n    print('I am learning CS51 already')\nelse: \n    print('I am not taking CS51 yet')","pos":30,"type":"cell"}
{"cell_type":"code","id":"6420a1","input":"for A_team in ['Argentina', 'Austria']:\n    for B_team in ['Belgium', 'Brazil']:\n        print('There will be a match between', A_team, 'and', B_team)","metadata":{"colab":{},"colab_type":"code","id":"G1MW9GfPIMTP"},"pos":72,"type":"cell"}
{"cell_type":"code","id":"7ccd9b","input":"for student_name in ['John', 'Katie','Tom']:\n    print(student_name)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":857,"status":"ok","timestamp":1534446259297,"user":{"displayName":"Quang Tran","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"103528044432244998451"},"user_tz":-420},"id":"c386P-tfH3WD","outputId":"708c304a-0d49-4c87-8bd4-6b071ea4a7e6"},"pos":51,"type":"cell"}
{"cell_type":"code","id":"886c65","input":"for item in ['a','b','c','d','e']:\n    print('Hello')","metadata":{"colab":{},"colab_type":"code","id":"FmORZ0xIIyU2","outputId":"29732f50-6e50-4663-e681-53aa1819f5cc"},"pos":67,"type":"cell"}
{"cell_type":"code","id":"8ea933","input":"# for i in [True, False]:\n#     print(not i)","metadata":{"colab":{},"colab_type":"code","id":"vcHpHRfBILqg"},"pos":60,"type":"cell"}
{"cell_type":"code","id":"939e32","input":"import miupload\n# miupload.login_gui() # Uncomment this line if you changed the computer since last session\nmiupload.submit_notebook(assignment=\"SSS2lab\")","pos":103,"type":"cell"}
{"cell_type":"code","id":"96b281","input":"#creating an empty list so that we can store our numbers in it later. \nnumbers_list2 = []\n\n#appending the nymbers to it\nfor i in range(100): \n    numbers_list2.append(i)\n    \nnumbers_list2  ","pos":59,"type":"cell"}
{"cell_type":"code","id":"9aa62d","input":"# if 0:\n#     print('0 means True')\n# else:\n#     print('0 means False')","metadata":{"colab":{},"colab_type":"code","id":"tF-mOAn4mXsH"},"pos":34,"type":"cell"}
{"cell_type":"code","id":"ac779b","input":"try:\n    if \"FE50\" in my_minerva_classes:\n        message= \"1. Lists: Good job!\"\n        score += 1\n    else:\n        message= \"1. Lists: Your list is incomplete\"\n        raise ValueError(message)\nexcept NameError:\n    message = \"1. Lists: Not found! Have you run all cells without error?\"\n    raise NotImplementedError(message)\nfinally: log.append(message)","metadata":{"nbgrader":{"grade":true,"grade_id":"ac779b","locked":true,"points":1,"schema_version":1,"solution":false}},"pos":96,"type":"cell"}
{"cell_type":"code","id":"b0f837","input":"log = []\nscore = 0","pos":95,"type":"cell"}
{"cell_type":"code","id":"b2821e","input":"def printTruthTable():\n    # outputs a printed truth table for implication\n    print('a     b       | sentence1')\n    for a in [True,False]:\n        for b in [True,False]:\n               \t\t print(a, b,  '    ', implication(a,b))\n\nprintTruthTable()","pos":75,"type":"cell"}
{"cell_type":"code","id":"ba41d4","input":"try:\n\tif'FE50'in my_minerva_classes:A='1. Lists: Good job!';score+=1\n\telse:A='1. Lists: Your list is incomplete';raise ValueError(A)\nexcept NameError:A='1. Lists: Not found! Have you run all cells without error?';raise NotImplementedError(A)\nfinally:log.append(A)","metadata":{"nbgrader":{"grade":true,"grade_id":"ba41d4","locked":true,"points":1,"schema_version":1,"solution":false}},"pos":97,"type":"cell"}
{"cell_type":"code","id":"bc72dc","input":"from IPython.display import display, Javascript, HTML\ndisplay(HTML(\"\"\"<br><div class=\"alert alert-block alert-info\">\n<b>Your score from SSS2 LAB is:</b> \"\"\"+str(score)+\"\"\" from 2 points.\n</div>\"\"\"))\nfor line in log: print(line)","pos":102,"type":"cell"}
{"cell_type":"code","id":"c38de4","input":"def implication(P, Q):\n    if P == True and Q == True:\n        return True\n    elif P == True and Q == False:\n        return False\n    else:\n        return True","metadata":{"colab":{},"colab_type":"code","id":"DOjhqpoISCni"},"pos":44,"type":"cell"}
{"cell_type":"code","id":"cecaf6","input":"for natural_number in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n                       10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n                       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, \n                       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n                       40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:\n    print(natural_number)","metadata":{"colab":{},"colab_type":"code","id":"Ejm69EikIVjO","outputId":"151aeecd-4db3-4474-d8ca-8ed4ac3cc404"},"pos":63,"type":"cell"}
{"cell_type":"code","id":"dbccb8","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"n11oUCFAI01j"},"pos":68,"type":"cell"}
{"cell_type":"code","id":"e15a7f","input":"try:\n    if students_grade == 2.7: # both True and False parts are correct\n        message= \"2.1. If Statements: Chapter finished successfully!\"\n        score += 1\n    else:\n        message= \"2.1. If Statements: Chapter finished successfully!\"\n        score += 1 \nexcept NameError:\n    message = \"2.1. If Statements: Not found! Have you run all cells without error?\"\n    raise NotImplementedError(message)\nfinally: log.append(message)","metadata":{"nbgrader":{"grade":true,"grade_id":"e15a7f","locked":true,"points":1,"schema_version":1,"solution":false}},"pos":101,"type":"cell"}
{"cell_type":"code","id":"edc737","input":"# if (1 != 1):\n#     print('1 is not 1')\n# else:\n#     print('1 = 1')","metadata":{"colab":{},"colab_type":"code","id":"CfuDTM8VmXsE"},"pos":32,"type":"cell"}
{"cell_type":"code","id":"f050f4","input":"my_minerva_classes = ['CS50', 'SS50', 'NA50', 'AH50']\nprint(my_minerva_classes[0]) #any guesses what will be printed out?","pos":18,"type":"cell"}
{"cell_type":"code","id":"f2ed95","input":"numbers_list = [0,1,2,3]","pos":57,"type":"cell"}
{"cell_type":"code","id":"f8a575","input":"my_first_list = [\"cat\", 2, True]\nprint(my_first_list)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"00a739","input":"Now try changing `students_grade` to 2.2. and running the cell again. Is there anything printed out now?\n\n---","metadata":{"colab_type":"text","id":"pFajrpKPmXsM"},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"0387d2","input":"Nested loops are just loops that have a loop inside the loop. Got it?\nThe following loop includes two loops: outer and inner. It starts looping from 'Argentina' and then does loop over 'Austria' until it finished inner loop.","pos":71,"type":"cell"}
{"cell_type":"markdown","id":"07b35f","input":"Imagine you have a list of a thousand students' names and you need to print those names. Without the help of an iteration tool like the ```for``` statement, you will have to manually print all of those names using a thousand lines of print statements. With the for statement, all will collapse into only 2 lines of code. Neat-o!","metadata":{"colab_type":"text","id":"WFqx-CvNIEa7"},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"0b421b","input":"It's also worth mentioning that both `elif` and `else` are *optional* in Python \"if\" statement. So in the cell below, the message will be printed only if the condition is satisfied. Can you guess an output of this cell? Then run the cell and see! ","metadata":{"colab_type":"text","id":"K4si1zX1SCng"},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"0fc3ec","input":"What if you want to create a list of numbers? One way to do it is just defining a list and putting the numbers manually.","pos":55,"type":"cell"}
{"cell_type":"markdown","id":"1df605","input":"And here you are! You just computed a *large* number of deck cards combinations with only 2 lines of code. You should probably just always have Python open on your computer in case you need to calculate something quickly.\n","metadata":{"colab_type":"text","id":"0BvzLQavmXr7"},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"20318e","input":"The word `import` here says: 'Could you find this library and import its content to my program, please?' to the computer network.\nAfter it is done, you are free to use any of the libraries' contents. In our case, we access `math.factorial(x)` function and use it to compute the 52!. ","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"25811e","input":"Now, think back to the first FA class when you estimated the size of the *factorial* of 52 (or 52!). How can we calculate this number? Let's use our favorite new calculator, Python. One way to do this in Python requires us to **import the math library**. \n\nTo make it easier for you to understand the concept of a library, let's take a real book library as an example. In real book library, you would usually look for information *that already exists* so that you can **reuse** book's information for your advantage and don't reinvent the wheel, right?\nThe same thing works with **software libraries**, which allow you to access and use *functions* already implemented by someone very capable, thus preventing the loss of productive working hours in doing something that has already been done:) \n\nFor instance, Python's *Math Library* provides access to some standard math functions and constants in Python, which we can use throughout our code for more complex mathematical computation.","metadata":{"colab_type":"text","id":"LfwjR8Q7mXr3"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"2bab30","input":"# A. Python Lab\n<a id=\"lab\"></a>","metadata":{"colab_type":"text","id":"SaPVNLznSCmh"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"2de4dc","input":"## 3. FOR LOOPS \n<a id = 'for'></a>","metadata":{"colab_type":"text","id":"xlHLyj3NSCn5"},"pos":49,"type":"cell"}
{"cell_type":"markdown","id":"3b7b7a","input":"Remember the list of Minerva classes we created at the very beginning?->  `my_minerva_classes = ['CS50', 'SS50', 'NA50', 'AH50']`. Let's use it for with conditional states too!","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"3be23a","input":"##  Warm-up\n<a id=\"warm\"></a>\n\nRecall that last time you used Python as a Calculator and managed to compute some huge numbers with its help. For instance, to know the output of $19*24*(60^2)$ you can just use *math operators* and Python. The next cell implements it in Python.","metadata":{"colab_type":"text","id":"Bt3ZCpmLmXrx"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"42a5be","input":"   <div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n<strong>Good Job with LAB, now you can continue in notebook with exercises.</strong>\n</div>","metadata":{"colab":{},"colab_type":"code","id":"-veXjEqsFVme"},"pos":104,"type":"cell"}
{"cell_type":"markdown","id":"43cf1e","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-xs-6 col-sm-3 col-md-2 col-lg-1\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\nBy the way, you can type 'math.' and press TAB to see all the available library's methods just in your notebook! ","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"4c5314","input":"It turns out that Python's `if` statement has a general form that includes one or more `elif` (else if) checks, and we could you this extra feature for our task:\n```\nif [BOOLEAN EXPRESSION 1]: \n    [STATEMENT 1]\nelif [BOOLEAN EXPRESSION 2]: \n    [STATEMENT 2]\nelse: \n    [STATEMENT3]\n```\n","metadata":{"colab_type":"text","id":"LspXeb1uSCng"},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"4e4f46","input":"\nFor future, if you want to see more magical powers of Python Math library, it is always a good idea to look at official [**Python Documentation**](https://docs.python.org/3/library/math.html). \n\n----","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"55d9a8","input":"Whoops, apparently you got an email from Minerva that a new class (aka Final Project or FE50) will be added to your classes. Is there any way to add it to `my_minerva_classes` list? Sure thing! Just use `list.append(element)` to do so!","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"5b4366","input":"## 1. LISTS\n<a id=\"lists\"></a>\n### What are lists?\n\nLists are pretty intuitive: they are a data type that consists of an ordered sequence of elements, separated by commas. An example: [\"cat\", 2, True] is a list with three elements. The first element is a string, the second an integer, and the third a boolean.\n\nThe first step when dealing with lists is learning how to create them! Doing so is very simple. All you have to do is write the elements you want in the list within square brackets, and separated by commas.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"5d0eaf","input":"If you want to learn more about conditionals in Python check out  [this DataCamp lesson](https://campus.datacamp.com/courses/intermediate-python-for-data-science/logic-control-flow-and-filtering?ex=9) at home.","metadata":{"colab_type":"text","id":"PU0V1X5km4Ki"},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"60edf4","input":"Recall that last session you learned *print statements* that look like this: ","metadata":{"colab_type":"text","id":"f-gLfSwAmXr9"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"6e806c","input":"Note that ```range(50)``` contains 50 elements, but goes from 0 to 49 by default. We'll discuss more on the ```range``` function when we cover lists in an upcoming session. Rewrite the following `for` statement using `range`.","metadata":{"colab_type":"text","id":"R6W9ORDxIxJo"},"pos":66,"type":"cell"}
{"cell_type":"markdown","id":"7451c7","input":"## Are you ready to submit your LAB notebook?\nThis part contains code that checks if your submission is corrected and ready to be graded by your peer tutors. Feel free to run the cell and check if everything is done. Peer tutors will run even more tests to check if your submissions are correct, but it will be very similar to this one. Remember, It is OK to submit an unfinished notebook if you worked hard during the SSS, but try to finish it in your free time or visit your peer tutor's Office Hours to get more up-to-speed and gain confidence in coding.","pos":93,"type":"cell"}
{"cell_type":"markdown","id":"76b743","input":"Also, you can access certain element in a list by specifying its index. It is important to remember that **indexing in Python starts from 0.** So the first element in a list will have an index of 0 and the last will be have an index of (n-1) in list which contains n elements.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"76f989","input":"### 2.2. Adding more conditions with elif\n<a id=\"elif\"></a>","metadata":{"colab_type":"text","id":"2YVB6ASwmXsM"},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"771cf3","input":"## 2. IF STATEMENTS\n<a id=\"ifbig\"></a>\n### 2.1. Simple If statements\n<a id=\"simpleif\"></a>","metadata":{"colab_type":"text","id":"e6nz6oqFSCmi"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"850985","input":"With the `implication` function defined below, can you guess what `print(implication(True, False)` will print? Use the cell below to answer and then check your answer. \n\n*Aside*: Note that this is not the only way to define the logical implication function in Python. It can also be done with _one line_ of code using a logically equivalent sentence. Do you recall how to do it from class?","metadata":{"colab_type":"text","id":"TZMkmsk6SCni"},"pos":43,"type":"cell"}
{"cell_type":"markdown","id":"9398d5","input":"You have already encountered printing truth tables in class this week. \n\nLet's do a modification of it and print the truth table for `implication(P, Q)` that we have defined earlier as follows:\n```\ndef implication(P, Q):\n    if P == True and Q == True:\n        return True\n    elif P == True and Q == False:\n        return False\n    else:\n        return True\n```","pos":73,"type":"cell"}
{"cell_type":"markdown","id":"94333a","input":"---","metadata":{"colab_type":"text","id":"fF3i9xG7mXs3"},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"97f58c","input":"This session will expand on the skills you learned in the last session. Along the way, you will have some practice with **#deduction** and some early practice with **#algorithms**. You will also see the magical power of **python libraries** and how to avoid writing the same thing over and over and over and over and over again with the help of **for loops**. Also, **If statements** will help you get a grasp of selection and conditioning in Python. Let's go!","metadata":{"colab_type":"text","id":"QzGz9q0lSCmf"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"99b432","input":"Any guesses on what this number means? \nIt is the (approximate) number of *seconds* you spent *already* at Minerva. Time flies, doesn't it? \n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"9d2335","input":"Still pretty ugly. We had to write up all the first 50 natural numbers ourselves! Fortunately, Python has a function called ```range``` which will generate a list of numbers for iterations. The following code also prints the first 100 natural numbers:","metadata":{"colab_type":"text","id":"raTd5vN-IlEb"},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"9f7810","input":"---","metadata":{"colab_type":"text","id":"XO2jD99-mXsU"},"pos":48,"type":"cell"}
{"cell_type":"markdown","id":"a446e6","input":"   <div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"Snake\"></div>\n<strong>It is nice to see you again! Sssss.</strong> Today, We will start with little Warm-up activity.\n</div>","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"aa794b","input":"**Your answer here** (Double click to edit this cell and write your answer)  \n","metadata":{"colab_type":"text","id":"JoWSV7zIBGSN"},"pos":45,"type":"cell"}
{"cell_type":"markdown","id":"ab9f60","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n<strong>Beginning SSS2</strong>, this section is going to be splitted into multiple smaller cells. The result of the tests is going to be printed at the end. Each of the cell can throw an exception. Exception means that your code may not be a completed.<br>\n<b>ValueError means</b>, that your function or variable contains incorrect value.<br>\n<strong>NameError or NotImplemetedError means</strong>, that we are looking for non-existing variable, probably because the cell has not been executed or variable was renamed. <br> <i>If you still have a time, you should go and fix the bugs.</i>\n</div>","pos":94,"type":"cell"}
{"cell_type":"markdown","id":"aefba4","input":"We also sometimes wish to execute some lines of code over and over again, or repeat some pattern in our program. The ```for``` statement is one tool for such iterations. For example, to iterate over all the students' names and print those names:","metadata":{"colab_type":"text","id":"DsxdalSbHzak"},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"b61a86","input":"What if you want to print the first 50 (non-negative) whole numbers? (0,1,2,...,49)? You can certain do this:","metadata":{"colab_type":"text","id":"3UipT9wcISQL"},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"b6f3ef","input":"<div class=\"panel panel-success\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">CONTENTS</h3>\n  </div>\n  <div class=\"panel-body\">\n<ul> \n    <li><a href=\"#warm\">Warm-up</a></li>\n    <li><a href=\"#lab\">A. Python Lab</a></li>\n    <ul>\n        <li><a href=\"#lists\">1. LISTS</a></li>\n        <li><a href=\"#ifbig\">2. IF STATEMENTS</a></li>\n        <ul>\n            <li><a href=\"#if\">2.1. Simple if statements</a></li>\n            <li><a href=\"#elif\">2.2. Adding more conditions with elif</a></li>\n        </ul>\n        <li><a href=\"#for\">3. FOR LOOPS</a></li>\n        </ul>\n      </ul>\n    \n\n\n  </div>\n</div>\n\n","metadata":{"colab_type":"text","id":"fkJ-5_5KSCme"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"b87ff3","input":"***\n","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"c0a91c","input":"For each of the 3 cells below, guess what will happen when you uncomment and run it, then actually run it to check your answer. ","metadata":{"colab_type":"text","id":"7o44p-2MmXsD"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c80e5f","input":"The natural language equivalent of the above lines of code is that for each name in the list (`['John','Katie','Tom']`), print that name. It is essentially the equivalent of the following lines of code:","metadata":{"colab_type":"text","id":"FNeGpfp_H97X"},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"c9a98a","input":"Uncomment the following cells and guess what each of them do. \n\nP.S. (press `command+/` on Mac or `CTRL+/` on Windows)","metadata":{"colab_type":"text","id":"n4Osz-SmIJD6"},"pos":56,"type":"cell"}
{"cell_type":"markdown","id":"ca02ec","input":"### 3.2 Nested loops","pos":70,"type":"cell"}
{"cell_type":"markdown","id":"ca35ee","input":"The following code checks what day in the week it is and generates a corresponding message.","metadata":{"colab_type":"text","id":"SzH6XEdpSCnh"},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"d8d18d","input":"If you want to learn more about For loops check out [this DataCamp lesson](https://campus.datacamp.com/courses/intermediate-python-for-data-science/loops?ex=5) at home. ","metadata":{"colab_type":"text","id":"4ln92J17nXOo"},"pos":69,"type":"cell"}
{"cell_type":"markdown","id":"debf1d","input":"Nice! Not a hard thing with only 4 numbers, right? But what if we want to create a list which would consist of 100 numbers? For loop can help us!\n","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"e2f14d","input":"# SSS2. Python Basics and #Deduction  [LAB]","metadata":{"colab_type":"text","id":"1bmdv457SCmc"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"ec36a6","input":"Do you remember the data type of '14' from the previous week? (Hint: there are integers, floats, strings, bools....).\nHow do you check the data for their type? ","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"f7d139","input":"Now using nested loop we can print the whole truth table.\n","pos":74,"type":"cell"}
{"id":0,"time":1565517164670,"type":"user"}
{"last_load":1565517163789,"type":"file"}