{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80928768},"metadata":{"colab":{"collapsed_sections":[],"name":"SSS6.ipynb","provenance":[],"version":"0.3.2"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"0a14b5","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"B-MaRcQCq_l0"},"pos":47,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"0a3354","input":"import matplotlib.pyplot as plt\n\nxaxis = [1, 2, 3, 4]\nyaxis = [3, 7, 7, 14]\n\nplt.scatter(xaxis, yaxis)\nplt.title(\"My first scatter plot\")\nplt.show()","metadata":{"colab":{},"colab_type":"code","id":"IoiubIEoq_lf","outputId":"b6d0fe21-d885-4284-f70b-338b33fa80c6"},"pos":29,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"11beb0","input":"import matplotlib.pyplot as plt\n\nxaxis = [1, 2, 3, 4]\nyaxis = [3, 7, 7, 14]\n\nplt.scatter(xaxis, yaxis)\nplt.show()","metadata":{"colab":{},"colab_type":"code","id":"ksNqtqnUSI47","outputId":"dcc76b43-3a8c-4885-b47f-dc34508aa69a"},"pos":26,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"35aa43","input":"# your code to fix the ice cream data","pos":22,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"3670e2","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"uh_f7xiqq_ly"},"pos":45,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"3b00b9","input":"ages_data = ages[1:]\nprint(ages_data)","pos":20,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"3eed7d","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"jOsdinDAq_lu"},"pos":41,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"441401","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"G0xD0JJkSI5L"},"pos":39,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"50baf7","input":"#apply your function to John's data","pos":34,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"9c1dea","input":"def mystats(col):\n    # Your code here\n    ","metadata":{"colab":{},"colab_type":"code","id":"MOtghfJTSI5E"},"pos":33,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"ad9c32","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"XSuNBaw1SI5J"},"pos":37,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"b5239f","input":"import csv \n\nfile = csv.reader(open('student_data.csv'))\n\nprint(type(file))\n\nfor row in file:\n    print(row)","metadata":{"colab":{},"colab_type":"code","id":"F-uNqi9-SI4j"},"pos":13,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"c786d2","input":"import csv\n\nfile = csv.reader(open('student_data.csv'))\n\nages = []\n\nfor row in file:\n    # use this loop to create a list with students' (fake) ages!\n    \nprint(\"These were the ages students claimed to be:\", ages)\n\nfor idx in range(len(ages)):\n    # can you input the code here to correct their ages, and output a list with the correct values?","metadata":{"colab":{},"colab_type":"code","id":"itljZ6z-SI4y"},"pos":18,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"dc5ac8","input":"# Your code here","metadata":{"colab":{},"colab_type":"code","id":"TuYHOVbQq_lx"},"pos":43,"type":"cell"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"ffb474","input":"import csv\n\nfile = csv.reader(open('student_data.csv'))\n\nprint(type(file))\n\nice_cream = [] #an emtpy list\n\nfor row in file:\n    ice_cream.append(row[2]) # At this stage, we are copying the relevant values \n                             # to a list because a list is easier to manipulate\n                             # because we already learned about them in SSS4\n\nprint(\"This is the original list of estimates:\\n\", ice_cream)\n\nfor idx in range(len(ice_cream)): # can you figure out why we iterated using the \"range\" \n                                  # function rather than by iterating over the list's elements?\n    if not idx == 0: #Hint: the quesiton above has to do with this line!\n        ice_cream[idx] = float(ice_cream[idx]) + 100\n\nprint(\"\\nThis is the new, corrected list of estimates:\\n\", ice_cream)","metadata":{"colab":{},"colab_type":"code","id":"B6eBaIm3SI4u","outputId":"0fe37d99-7699-4db5-908e-65741c4e91cb"},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"72aac9","input":"lst = []","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"5e6e54","input":"mean = \nmedian = \nstd = \nmode = \nsum = \nrange =\n\nprint(mean, median, std, sum, mode, range)","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"098da8","input":"Do the same for the ice cream consumption data:","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"0de3d1","input":"## 2. Plotting With Matplotlib\n<a id=\"matplotlib\"></a>","metadata":{"colab_type":"text","id":"1CvuEoysSI46"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"0efadf","input":"Set the labels for both the axes! Google if you don't know how to do so.\n","metadata":{"colab_type":"text","id":"EfJ7GXJVSI49"},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"0f900f","input":"## [Optional] Exercise 6. Fibonacci\n<a id=\"exercise6\"></a>\n(Adapted from [Project Euler Problem 2](https://projecteuler.net/problem=2))\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nGiven two positive integers A and B, find the number of Fibonacci numbers between A and B.","metadata":{"colab_type":"text","id":"IbQlRpvSq_ly"},"pos":44,"type":"cell"}
{"cell_type":"markdown","id":"10c8c7","input":"\n<div class=\"panel panel-success\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">CONTENTS</h3>\n  </div>\n  <div class=\"panel-body\">\n<ul>\n    <li><a href=\"#warm\">Warm-up</a></li>\n    <li><a href=\"#lab\">A. Python Lab: Libraries</a></li>\n    <ul>\n        <li><a href=\"#csv\">1. Using .csv Files With Python</a></li>\n        <li><a href=\"#matplotlib\">2. Plotting with Matplotlib</a></li>\n        <ul>\n    <li><a href=\"#ex\">B. Exercise</a></li>\n    <ul>\n        <li><a href=\"#exercise1\">Exercise 1</a></li>\n        <li><a href=\"#exercise2\">Exercise 2</a></li>\n        <li><a href=\"#exercise3\">Exercise 3</a></li>\n        <li><a href=\"#exercise4\">Exercise 4</a></li>\n        <li><a href=\"#exercise5\">[Optional] Exercise 5</a></li>\n        <li><a href=\"#exercise6\">[Optional] Exercise 6</a></li>\n        <li><a href=\"#exercise7\">[Optional] Exercise 7</a></li>\n        </ul>\n    </ul>\n  </div>\n</div>","metadata":{"colab_type":"text","id":"uAgJbshcSI4f"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"11b5fd","input":"## 1. Using .csv Files With Python\n<a id=\"csv\"></a>","metadata":{"colab_type":"text","id":"6Yii4-wcSI4h"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"122362","input":"## Warm-up\n<a id=\"warm\"></a>\nWe have started learning this library in the previous session. Let's revise it by doing one exercise: \n##### Shoesize\nFirst ask your fellow classmates for their shoesizes. Collect all of the numbers and create a new array out of them called `lst`. \n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"225cf3","input":"Now import the numpy library and find the mean, median, sum, standard deviation, range and mode of `lst`. \n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"22f160","input":"***Story time!*** Prince Charming, now a Minerva student, asked each of his peers in his FA class what their ages are. He also asked his peers to estimate how much ice-cream, in grams, they consume per month. He recorded this data on an Excel document. John wants to perform some tests on his data: he wants to find the mode, mean and median for both age and ice cream consumption, and he wants to use Python to do so. \n\nTo begin with, John exports his Excel doc as a **.csv file** (a very simple file type that stores the contents from a table, similar to a spreadsheet). He now has to import that file to his Anaconda Jupyter Notebook program. Look at the code below. Before running it, can you try to guess what it does? After you have a hunch, run it! ","metadata":{"colab_type":"text","id":"QksgtGPQSI4i"},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"34915d","input":"## Exercise 2. Scatter Plot for Prince Charming\n<a id=\"exercise2\"></a>\nUsing MatPlotLib, plot a scatter plot with age on the $x$ axis, and ice cream consumption on the $y$ axis. Make sure you label the axes and give a title to your plot! (ALWAYS important for strong #dataviz scores)","metadata":{"colab_type":"text","id":"s5rKswi_SI5I"},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"421029","input":"Now these estimates seem more plausible! \n\nBut wait! Prince Charming found out that his classmates are liars (including himself!) Those who said they had 19 or more years of age are actually two years younger! Do you think you could write code, similar to the one above, to make the necessary corrections?","metadata":{"colab_type":"text","id":"j5THgpkISI4x"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"446e55","input":"If you did it right, you should find that the length of each list is 18. The stats for the ages should be (18.0, 17.5, 2.646) and the stats for the ice cream should be (376.0, 380.0, 30.094).\n\n**Side note**: The NumPy libarary does not have a function to compute the mode of a list. This is most easily done using another library: SciPy. If you ever need to compute the mode, you can review the code from session 6.2 to see how to use this library. Or, even better, you can use the mode from scratch function that you wrote in SSS4!","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"4dfa80","input":" If you are interested (hint: you are) in learning more functions from the NumPy library, check out [this tutorial](https://docs.scipy.org/doc/numpy-1.15.1/user/quickstart.html). **You are highly encouraged to check this out sometime outside of the SSS**.\n\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"4f5930","input":"# SSS 6. #descriptivestats and libraries-sss","metadata":{"colab_type":"text","id":"H9iKSDyYSI4e"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"52c845","input":"## Exercise 3. Histogram for Prince Charming\n<a id=\"exercise3\"></a>\nUsing MatPlotLib, plot a histogram for ice cream consumption. You'll need to Google how to do so. Experiment with the number of bins.","metadata":{"colab_type":"text","id":"tUNzJ8VlSI5K"},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"5341d4","input":"Let us examine the documentation. While the function `matplotlib.pyplot.title` receives many arguments/parameters (`label`,`fondtdict`, etc.), `label` seems to directly address our need: it is **text to use for the title**, and its type is a string (`str`). From this we know that if we want to title our plot \"My first scatter plot\", we just need to give the string \"My first scatter plot\" to the function: `matplotlib.pyplot.title(\"My first scatterplot\")`. And since we shortened `matplotlib.pyplot` to `plt` (what `import matplotlib.pyplot as plt` does), the syntax is simplified to `plt.title(\"My first scatter plot\")`. Let's screate the plot again, this time with a title.","metadata":{"colab_type":"text","id":"ugBY3ttlq_le"},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"54969e","input":"## Exercise 1. Descriptive Stats for Prince Charming\n<a id=\"exercise1\"></a>\nWrite a function `mystats` that helps Prince Charming compute the following quantities for his data using NumPy functions. \n\n1. length\n2. mean\n3. median\n4. standard deviation  \n\nUse this function to compute these quantities for both the **ages** data and the **ice cream** consumption data that we constructed above. Your function should input a column from the data as a list and print these four values. Then call the function to apply it to ages and ice cream.  ","metadata":{"colab_type":"text","id":"amV6e_uRSI5D"},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"69dfa9","input":"### Scatter Plot\n\nNow, Prince Charming wants to plot his data. To do so, he can use a Python library called \"MatPlotLib\". Anaconda and CoCalc already have this library built in, but if you are using another program, you might have to install MatPlotLib for this next part. \n\nSay John wants to test out MatPlotLib before plotting his data for real. He wants to plot the following data points on a plane: (1, 3), (2, 7), (3, 7), (4, 14). To do so, he uses the code below.\n\n**Running the cell may not show the graph the first time. This is usually solved by running it a second time**","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"6d3505","input":"<div class=\"alert alert-block alert-success\">\n    <div class=\"col-xs-6 col-sm-3 col-md-2 col-lg-1\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n    <strong>SIDE NOTE: \n    </strong> \n    <br>The code in FA session 6.2 used a different method for reading in the Young People Survey csv file involving another library, <b>\"pandas\"</b>. This is a popular, but more advanced, statistics package that we will not cover in detail here, maybe later :)\n</div>","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"704b0a","input":"<br>\n\n <img class=\"img-responsive responsive-img\" src=\"https://www.mememaker.net/api/bucket?path=static/img/memes/full/2015/Dec/9/5/whos-the-best-im-the-best.jpg\" alt=\"...\">\n\n<br>","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"7eab76","input":"# A. Python Lab: Libraries\n<a id=\"lab\"></a>","metadata":{"colab_type":"text","id":"UrVxQLOmq_lL"},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"8229d9","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n    <strong>RECAP: \n    </strong> \n    <br>As you know from the SSS5, Python <b>\"libraries\"</b> are packages that contain <b>data structures and functions</b> that perform specific tasks. Since they are special, we have to tell Python to import them before we can use them in our own code. This requires an <b>IMPORT</b> statement at the top of our code; look out for these statements in the examples to follow.</br>\n</div>\n\n\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"8c3177","input":"As it turns out, Prince Charming is pretty sure that student's estimations for how much ice-cream they consumer are too low! He thinks each person consumes 100 g more ice-cream than they think! With that in mind, John wants to add 100 g to each of the ice-cream estimations within his table. First, he wants to create a list with all values of ice-cream consumption, and then he wants to increase his values by 100 each. This is the code he writes:","metadata":{"colab_type":"text","id":"GDBqI9DdSI4t"},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"9f930c","input":"Now, let's break it down:\n1. The `import csv` command imports the Python library that allows one to use csv-related methods\n2. The variable `file` is set to a .csv file (John's data)\n3. The `open` command asks the interpreter to open a file with the name 'student_data.csv' that lies within the same directory as this notebook (i.e., the same \"folder\" in Windows or Mac OS)\n4. The `csv.reader()` command \"reads\" the file we opened, meaning it transforms that file into a format usable by the Python interpreter\n5. Now we have a variable named file that corresponds to a '.csv reader' data type! This datatype can be iterated over just like a list, and that is what we do with the 'for' loop: we iterate over each row, and print its contents!","metadata":{"colab_type":"text","id":"yy1Ujyg1SI4p"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"a01e48","input":"<div class=\"alert alert-block alert-success\">\n    <div class=\"col-xs-6 col-sm-3 col-md-2 col-lg-1\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n    <strong>NOTES-sss: \n    </strong> \n    <br>\n    \n- Even advanced programmers sometimes <b>cannot</b> remember all the function syntax and need to rely on help from the <b>Internet</b>, so it is important we practice garnering readily available information out there to develop our own solution to a problem at hand. Quote from anonymous person who codes for a living: <b>\"Looking stuff up is literally half of my job\"</b>. Beside plotting with MatPlotLib, this section will also focus on this skill.  \n\n- We used MatPlotLib to make histograms for the Young People Survey in FA session 6.2, remember? You can practice making your own histograms in the Exercises.\n\n- This material is <b>HIGHLY</b> relevant for the #correlation and #dataviz HC's that you will be introduced to next week in FA and EA!\n\n</div>","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"bc73bc","input":"    <div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n<strong>It was wonderful seeing you today! Come to the OH to learn more and chat!</strong>\n<br> Also, Congrats on completing your SSS6! Do you have any questions or confusion points? Use the cell below to ask any questions, and we will try to address them in the next sessions or during OH.\n\n\nYou can be as precise as you want, e.g. 'I did not know why else statement should not be included.'\n</div>","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"bf8060","input":"# B.  Exercise","metadata":{"colab_type":"text","id":"ugC8kjj4SI5D"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c33f53","input":"## [Optional] Exercise 7. Pascal's Triangle\n<a id=\"exercise7\"></a>\nFollow [this link](https://en.wikipedia.org/wiki/Pascal%27s_triangle) to know what Pascal's Triangle is. Write a function that receives the row number (a non-negative integer) and outputs the list of numbers in that row.\n\nFor example,\n\nINPUT: `3`\n\nOUTPUT: `[1,3,3,1]`","metadata":{"colab_type":"text","id":"S4g2zj8Hq_lz"},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"c43f3d","input":"How do we set a title \"My first scatter plot\" for this plot in matplotlib? Googling \"matplotlib set title\" and going to the first link shows us documentation for function `matplotlib.pyplot.title`. Do not be intimidated by the seemingly daunting documentation! You got this!\n![documentation for plt.title](images/title_documentation.jpg)","metadata":{"colab_type":"text","id":"ThrAORDzq_ld"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"d3f8da","input":"Use this cells to leave comments","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"d6d3bf","input":"## Exercise 4. Histograms with Color\n<a id=\"exercise4\"></a>\nSet the bars in the histogram you created for exercise 4 to a different color. Google how to do this. How else can you alter your histogram to make it beautiful?","metadata":{"colab_type":"text","id":"jPHsz4dsq_lu"},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"daac95","input":"\n![welcome back gif](https://media.giphy.com/media/7AdfePb5FSHqYC2MNv/giphy.gif)\n\n    \nThis SSS-sss is a quick introduction to a few popular Python libraries that you'll be using frequently. You've already seen them in FA class this week! We'll continue learning about these libraries in upcoming SSS's, so you will continue to gain familiarity as the semester goes. We will also review **#descriptivestats** this week, as well as preview **#correlation** and **#dataviz**.\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"e268cb","input":"## [Optional] Exercise 5. Timezone\n<a id=\"exercise5\"></a>\nIn a clock, there are 12 numbers from 1 to 12. Currently, the hour hand is pointing at 3. There are two actions allowed to affect the hour hand: adjust it forward +x numbers, or backward -x numbers. For example, if you adjust it forward 5 numbers, the hand will point at number 8. If you adjust it backward 5 numbers, the hand will point at number 10. Write a function that takes an integer `x` as input (the sign of `x` indicates the direction of adjustment), and outputs the number the hand will point to after the adjustment.\n","metadata":{"colab_type":"text","id":"g9BW-GAvq_lx"},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"e81e39","input":"<blockquote class=\"alert-warning\">\n     Key Takeaways from Today´s SSS\n    <small>Libraries are <b>FUN</b> (there are so many: matplotlib, pandas, numpy, and many more🙀) </small>\n    <small>You can <b>EASILY</b> use all of the libraries learned today as <b>DATA ANALYSIS tools</b></small>\n    <small>You can also <b>plot</b> the analyzed data using <b>MATPLOTLIB</b></small>\n    <small>Being able to import <b>CSV files</b> makes your life 3000 easier</small>\n    </blockquote>","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"f06d5b","input":"One last thing to get this data ready for analysis.\n\nIn the exercises below, you will get to help John compute descriptive stats and make plots for his data using these `ice_cream` and `ages` lists. But there is one problem with our lists: the first element of each list should not be part of the processed data. For example, the first element of `ages` is `'Age'`, which is just a header for a data column and not an actual age. The cell below contains one way to delete the first element of each list. Run it to see how the header has been removed for the ages data.","pos":19,"type":"cell"}
{"id":0,"time":1565934429070,"type":"user"}
{"last_load":1565933026707,"type":"file"}