{"attachments":{"The-Aggravation-with-Conventional-Black-Box-Testing.png":{"type":"sha1","value":"6af619b80f1bb58f14aaf5b2ff0c9baaf16c597f"}},"cell_type":"markdown","id":"4f0f41","input":"You may think of a function as of a black box's magic 🎩. When calling a function, you are giving specific **input arguments**. Then, inside the box, some magic happens, and we receive an **output**.\n\n![The-Aggravation-with-Conventional-Black-Box-Testing.png](attachment:The-Aggravation-with-Conventional-Black-Box-Testing.png)\n\n\nIn our case of `add_three(x)`, the **`x` is _input_**, whereas **`returned result` is an _output_**. If we _call our predefined function_, we would only need to write one line of code. We won't see how computation is happening exactly, but somehow we will receive an output.","pos":36,"type":"cell"}
{"attachments":{"codingtime.jpeg":{"type":"sha1","value":"436edc18afd3bafbe2ee2a35a5edcacfc39f6624"}},"cell_type":"markdown","id":"f0838f","input":"# A. Python Lab\n<a id=\"lab\"></a>\n\n![codingtime.jpeg](attachment:codingtime.jpeg)","metadata":{"colab_type":"text","id":"TTWMi1V0VTo5"},"pos":17,"type":"cell"}
{"attachments":{"giphy.gif":{"type":"sha1","value":"ea273986bcd45abe9b77c2d1c0469ff86463a1c6"}},"cell_type":"markdown","id":"7cf970","input":"![giphy.gif](https://media.giphy.com/media/l3vRaWAPakjiEUQow/giphy.gif)\n\n    ","pos":63,"type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80924672},"metadata":{"colab":{"collapsed_sections":[],"name":"SSS3.ipynb","provenance":[],"version":"0.3.2"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"04308d","input":"R = False # R is changed to False\ndef create_S(): \n    S = False\ncreate_S() \nbool_val = R and S \nprint(bool_val) # supposed to print False ","metadata":{"colab":{},"colab_type":"code","id":"FfhSIpFtqSEo"},"pos":107,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"111b1a","input":"# Optional\ndef E(P, Q):\n    return (P + Q)==1","metadata":{"colab":{},"colab_type":"code","id":"V_4Hf5ujypW3"},"pos":94,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"39ef45","input":"def D(P, Q):\n    return True or False","metadata":{"colab":{},"colab_type":"code","id":"RLfDu66fVTp3"},"pos":93,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3dfa7c","input":"","pos":116,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"435d02","input":"A = True\ndef create_B(): # trying to create a variable B with value False for later use\n    B = False\ncreate_B() # B is created, presumably\nbool_val = A and B # evaluating True and False\nprint(bool_val) # supposed to print False","metadata":{"colab":{},"colab_type":"code","id":"nvWN7_SUQTgp"},"pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4b3038","input":"","pos":99,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"516a32","input":"def implication(P, Q):\n    return not P or Q","metadata":{"colab":{},"colab_type":"code","id":"DUosWAlsVTpw"},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5f196f","input":"P = False\ndef update_P(): # Trying to change P to its negation\n    P = not P\nupdate_P() # P has been negated, presumably\nprint(P) # supposed to print True","metadata":{"colab":{},"colab_type":"code","id":"aK4bCgecfU6K"},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5fd27d","input":"def addition(x,y):\n    return x + y\naddition(3,4) # assigning 3 to x and 4 to y. ","metadata":{"colab":{},"colab_type":"code","id":"BmRH64QBVTpG"},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"61c1e5","input":"def add_three(x): \n    result = x + 3 \n    return result ","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"798564","input":"for i in range(3):\n    print(i)","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7dccfc","input":"def B(P, Q):\n    return (P or Q) and (not (P and Q))","metadata":{"colab":{},"colab_type":"code","id":"OGLPhuo6VTp1"},"pos":91,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"861301","input":"def A(P, Q):\n    return not (P or Q)","metadata":{"colab":{},"colab_type":"code","id":"Ko3bwumWVTp0"},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"89f611","input":"add_three(2) #only one line of code! ","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9849dd","input":"print(range(3))","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a2b560","input":"score = 1\ndef C():\n    score = score + 1\nA() #call the function\nprint(score)","metadata":{"colab":{},"colab_type":"code","id":"orJRALVxQTgf"},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a32a74","input":"score = 1\ndef A():\n    global score\n    score = score + 1\nA()\nprint(score) # score now is updated to 2","metadata":{"colab":{},"colab_type":"code","id":"n8DRASRFdddD"},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b46832","input":"for i in(range(20,0,-2)):\n    print(i)\n","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bcb516","input":"for i in(range(0,20,2)):\n    print(i)","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d1a3d0","input":"score = 1\ndef B():\n    score = 4\nprint(score) # still 1","metadata":{"colab":{},"colab_type":"code","id":"E3ywZewnVTpC"},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d9ba64","input":"def C(P, Q):\n    return (P or Q) and ((not P) or (not Q))","metadata":{"colab":{},"colab_type":"code","id":"cHX5jsMeVTp2"},"pos":92,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dc3d7f","input":"range?","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e0bbd4","input":"R = True\ndef create_S(): \n    S = False\ncreate_S() \nbool_val = R or S # and changed to or\nprint(bool_val) # supposed to print True","metadata":{"colab":{},"colab_type":"code","id":"vpaJQVripF-N"},"pos":105,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e7709d","input":"def A():\n    grade = 8\nprint(grade)","metadata":{"colab":{},"colab_type":"code","id":"HlJPCYU0QTgU"},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f2326c","input":"R = True\ndef create_S(): # trying to create a variable S with value False for later use\n    S = False\ncreate_S() # B is created, presumably\nbool_val = R and S # evaluating True and False\nprint(bool_val) # supposed to print False","metadata":{"colab":{},"colab_type":"code","id":"gGS48tmSosHa"},"pos":103,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"2ee750","input":"def double_step_list(end_point):\n    ","output":{"0":{"ename":"SyntaxError","evalue":"unexpected EOF while parsing (<ipython-input-1-bcb224a9139c>, line 1)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-bcb224a9139c>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    def double_step_list(end_point):\u001b[0m\n\u001b[0m                                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"]}},"pos":97,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"55ecd5","input":"def creating_list(n): \n    list = []\n    for i in range(n): \n        list.append(i)\n    return list","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"94caa9","input":"print(creating_list(2))","output":{"0":{"name":"stdout","output_type":"stream","text":"[0, 1]\n"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9999d7","input":"print(creating_list(100))","output":{"0":{"name":"stdout","output_type":"stream","text":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"}},"pos":43,"type":"cell"}
{"cell_type":"markdown","id":"04f52a","input":"# SSS3. Markdown, Functions","metadata":{"colab_type":"text","id":"LEOp0iJ7VTo2"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"06bbcd","input":"**Your answer here** (Please format your answer nicely)","metadata":{"colab_type":"text","id":"ngxvyvnPVTpt"},"pos":67,"type":"cell"}
{"cell_type":"markdown","id":"077bb9","input":"**Your answer here:**","metadata":{"colab_type":"text","id":"1S8Qfhc5VTpL"},"pos":56,"type":"cell"}
{"cell_type":"markdown","id":"086c73","input":"Using those algorithms for inspiration, explain why both `print('hello' or 0)` and `print(0 or 'hello')` would print `hello` ","metadata":{"colab_type":"text","id":"XBPpJpD4qtHQ"},"pos":110,"type":"cell"}
{"cell_type":"markdown","id":"08ca54","input":"From Wikipedia: \"Exclusive or or exclusive disjunction is a logical operation that outputs true only when inputs differ (one is true, the other is false)\"\n\nWhich of the following functions (A, B, C, or D) perform this operation (P and Q are boolean values)? \n\n**Explain your answer.**","metadata":{"colab_type":"text","id":"RKna7y9UVTp0"},"pos":89,"type":"cell"}
{"cell_type":"markdown","id":"0b0b3e","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n    <strong>SSSsss-tip:\n    </strong>\n    <br>You can see information about built-in or imported functions (including <b>range()</b>), methods, libraries by typing a <b>'?'</b> after that function and running a cell. See below. </br>\n</div>\n","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"0d65b6","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n    <strong>HINT: \n    </strong> \n    <br>Double click on the cell with text to display markdown/LaTeX source code. Pay extra attention on <b>syntax</b> and special characters like<big><strong>* / . \\  \\$\\$ or \\$ # ## -</big></strong></br>\n</div>\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"0e672a","input":"<blockquote class=\"panel-danger\">\n    2. If only 1 argument is provided (as in the above example), then Python considers it to be a stopping point. However, you may not always want your sequence to start with 0 and increment every next number with 1, right? Python has a solution for this! Just provide *three arguments* to your `range(start, stop, step)` with corresponding values. \n</blockquote>","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"10a722","input":"Similarly as in Minerva, in Markdown everything is intetional and well organized. At the begining it may look scary, but as you get used on Markdown, it may become much faster then using graphical text editor. Good example are **headings**. To create well formated heading, you just need to put hashtag before the heading text. \n\n# Big Heading\n## Slightly Big Heading\n### Small Heading","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"10fc0f","input":"***","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"17ab5c","input":"[**Optional question**] What proof method did the student use to prove that the school's claim was false? Justify your answer. \n\n*Hint*: To fully answer this question, construct a real formal proof with symbolic logic and logical rules we've learned (e.g., modus ponens, modus tollens, rules of disjunctions or conjunctions, reductio ad absurdum, etc.)","metadata":{"colab_type":"text","id":"rW-mNRwhVTpz"},"pos":84,"type":"cell"}
{"cell_type":"markdown","id":"1a4f98","input":"Lastly, when calling functions and passing arguments, we are essentially assigning values to the variables.","metadata":{"colab_type":"text","id":"ozJLPkpOVTpG"},"pos":51,"type":"cell"}
{"cell_type":"markdown","id":"1a70d7","input":"A student sued a college for spreading false information. Specifically, he claimed that the college's advertisement line, \"A school for future leaders\" was an outright lie. He arrived at this conclusion after a thorough process of analyzing the school's claim and from some pieces of evidence he gathered. First, he rephrased the school's argument  \"**in simple terms with clear use of logical connectives and atomic sentences**\" (like you'll need to do in part B2.1 of the FA logical thinking assignment): \n\n\"If one attends school, one will become a leader.\" \n","metadata":{"colab_type":"text","id":"VV3UlYYaVTpu"},"pos":71,"type":"cell"}
{"cell_type":"markdown","id":"22e2b1","input":"## Exercise 3. Divisible by...\nWrite a python program to read three numbers (a,b,c) and check how many numbers between ‘a’ and ‘b’ are divisible by ‘c’","pos":98,"type":"cell"}
{"cell_type":"markdown","id":"27a150","input":"**Your answer here:**","metadata":{"colab_type":"text","id":"5hoUur9vrkAI"},"pos":111,"type":"cell"}
{"cell_type":"markdown","id":"29974e","input":"Did you realize that you have already encountered function in today's sessions? Any guesses what exactly it was? \n<br>\n<br>\n**`range()`** is one of the Python _built-in_ functions - a function that someone has already written before and let us use it. \n<br>\n<br>\nHaving functions is useful. As you may remember from the SSS1, functions can be reused later _many times_. No need to reinvent the wheel every time you need it, right?","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"29abdc","input":"When we assign a value to a variable name, Python creates or changes that name. **Scope** refers to the space in which a variable name is visible/ recognizable. Specifically, names assigned inside a function are visible only to the code within that function. Run the following code to see that it will throw an error since name `grade` is assigned within the function A. This means that we cannot use it outside the function (i.e., `grade` can only be seen inside it). We say `grade` is **local** to function A. ","metadata":{"colab_type":"text","id":"b9XoGRh2VTo9"},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"2a1c1b","input":"**Your answer here**","metadata":{"colab_type":"text","id":"5DToVGDHVTpv"},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"2c6d4f","input":"## Markdown","metadata":{"colab_type":"text","id":"e9R0RA0oVTo6"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2da3cb","input":"# B. Exercise\n<a id=\"ex\"></a>","metadata":{"colab_type":"text","id":"uv2r9KjfVTpz"},"pos":87,"type":"cell"}
{"cell_type":"markdown","id":"33c85f","input":"## Exercise 2. Lists creation\n<a id=\"ex2\"></a>\nWrite a function `double_step_list(end_point)`, which would take `end_point` as an argument and return a list containing every second element up to this argument. The code snippet below exemplified the desired output and needed input.  \n```\n[in]   double_step_list(8) \n[out]    [0,2,4,6,8]\n","pos":96,"type":"cell"}
{"cell_type":"markdown","id":"341b5a","input":"🐍AA: I changed all of the mistakes I could spot and corrected the html code so the image boxes look fine. Also, I got the \"![just some name for you to identify] (foldername/picture_name.png)\" part only when i looked at the magic box example below, could you write it in more understandable terms and maybe add an example? ","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"346d0c","input":"Translate the school's argument into symbolic logic, this time using a *logically equivalent* form involving only *or* and *negation* connectives. *Hint*: The following code from an in-class activity last week may help you with this question:","metadata":{"colab_type":"text","id":"tXiV0IvAVTpw"},"pos":77,"type":"cell"}
{"cell_type":"markdown","id":"37804f","input":"Python has many built-in functions, which we can use. One such is `range()` function which accepts an *integer* as an argument and returns a range object, which is nothing but a sequence of integers. ","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"3e5644","input":"**Remember about your posture!  (Feel free to stretch a bit with your Peer Tutor too;)**","metadata":{"colab_type":"text","id":"HlcqMJb3VTps"},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"3eeb19","input":"The student wished to show that the school's claim is false. One way he could do that is to first determine the negation of that claim, and then prove that the negation is true. ","metadata":{"colab_type":"text","id":"xyg-_G45VTpw"},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"3ef8be","input":"## Exercise 5. Strange Booleans\n<a id=\"ex3\"></a>\n\nIn the lab you saw that the following code would not work:","metadata":{"colab_type":"text","id":"WAZ9ZbB7oiog"},"pos":102,"type":"cell"}
{"cell_type":"markdown","id":"4608d7","input":"Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. \n<br><br>Using Markdown is different than using a WYSIWYG (What You See Is What You Get) editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn’t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.\n<br><br>For instance, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., **this text is bold**). It may take a while to get used to seeing Markdown syntax in your text, especially if you’re accustomed to WYSIWYG applications. \n\n","metadata":{"colab_type":"text","id":"9u-Sea0rVTo7"},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"4961e6","input":"Recall that in SSS1 we created our own function: ","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"4c136c","input":"**Your answer here**","metadata":{"colab_type":"text","id":"ilSVJMUPVTpz"},"pos":85,"type":"cell"}
{"cell_type":"markdown","id":"52c583","input":"Names assigned inside a function are independent of the same names assigned outside. That means when you assign a name in a function, Python creates or changes that name which is only **local** to the function and does not apply to the code outside the function. Run the cell to see that the variable `score` is not changed.","metadata":{"colab_type":"text","id":"1yBwy5lNVTpC"},"pos":48,"type":"cell"}
{"cell_type":"markdown","id":"586d52","input":"For mathematical formulas and special symbols, we are using markup language called **LaTeX**. LaTeX is super powerful in complex math expressions. LaTeX code is always stored **between dollar signs** (e.g., $a = bx + c$) or double dollar signs for displaying math input on new line and centered.","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"5b01ea","input":"Use this cell to leave any comments","pos":115,"type":"cell"}
{"cell_type":"markdown","id":"5eea6c","input":"Doing some math: $\\alpha^{2} = \\frac{\\beta}{\\gamma} = \\frac{4}{8}=0.5$ \n\nDoing some special math steps on new centered lines: $$x + 1 = 4$$ $$ \\Rightarrow x = 3$$  ","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"634621","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n    <br><strong> Markdown and LaTeX skills are critical for getting your <span style=\"background: #674EA7;border-radius: 0.8em;-moz-border-radius: 0.8em;-webkit-border-radius: 0.8em;color: #ffffff;display: inline-block;font-weight: bold;line-height: 1.6em;text-align: center;width: 1.6em; \">5</span> on #professionalism!</strong></br>\n    \n</div>\n","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"6355e2","input":"The upcoming FA assignment is due in 2 weeks. Every assignment is being graded on many various HCs, but one HC is included in _every single one._ \n<br/>\n**#Professionalism** implies following established guidelines to present yourself and your work products professionally. In Jupyter and CoCalc notebooks this can be partially achieved by making your notebook visually prettier. \n<br> \nDid you know that all the formated text (including the one you are reading right now), images and mathematical expression are created using **Markdown** and **LaTeX** languages. You will learn how to make beautiful notebooks and apply them in your future FA assignments and life. ","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"63983f","input":"Strangely, when changing the operator `and` to `or`, the code works perfectly fine.","metadata":{"colab_type":"text","id":"9U5UfW_1o-Hg"},"pos":104,"type":"cell"}
{"cell_type":"markdown","id":"66d2fd","input":"\n<div class=\"panel panel-success\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">CONTENTS</h3>\n  </div>\n  <div class=\"panel-body\">\n<ul>\n    <li><a href=\"#warm\">Warm-up</a></li>\n    <li><a href=\"#lab\">A. Python Lab</a></li>\n    <ul>\n        <li><a href=\"#range\">1. Range</a></li>\n        <li><a href=\"#function\">2. Functions</a></li>\n        <ul>\n            <li><a href=\"#recap\">2.1. Functions Recap</a></li>\n            <li><a href=\"#scope\">2.2. Scope of the functions</a></li>\n            </ul>\n    <li><a href=\"#revisit\">3. Revisiting DeMorgan's Law</a></li>\n    <ul>\n        <li><a href=\"#negating\">3.1. The use of DeMorgan's Law in negating conditionals</a></li>\n        </ul>\n    </ul>\n    <li><a href=\"#ex\">B. Exercise</a></li>\n    <ul>\n        <li><a href=\"#ex1\">Exercise 1</a></li>\n        <li><a href=\"#ex2\">Exercise 2</a></li>\n        <li><a href=\"#ex3\">Exercise 3</a></li>\n        </ul>\n    </ul>\n  </div>\n</div>","metadata":{"colab_type":"text","id":"xyptdPNbVTo3"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"68b4f5","input":"Using the rules, write the equivalents of the following statements:\n\na. $\\neg(\\neg A \\wedge B)$\n\nb. $\\neg(\\neg A \\vee \\neg B)$\n\nc. $\\neg((A \\vee B) \\vee C)$\n\nd. $\\neg (\\neg C \\wedge (A \\vee B))$","metadata":{"colab_type":"text","id":"wucYWQgyVTpt"},"pos":68,"type":"cell"}
{"cell_type":"markdown","id":"80a3dd","input":"Last time we used `for` `loops` to create a long list of numbers. Recall..\n<br>\n\n```python\n#creating an empty list so that we can add (or store) some values in it later. \nnumbers_list2 = []\n​\n#appending the numbers to it\nfor i in range(100): \n    numbers_list2.append(i)\n```\n","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"83a0ab","input":"What are the atomic sentences in the paraphrased argument?","metadata":{"colab_type":"text","id":"98ESfERUVTpu"},"pos":72,"type":"cell"}
{"cell_type":"markdown","id":"86bfa9","input":"**Your answer here**","metadata":{"colab_type":"text","id":"xldE5MOVVTp4"},"pos":95,"type":"cell"}
{"cell_type":"markdown","id":"88a335","input":"The function C attempts to increment the variable `score` by 1, but calling it will throw an error. Why? Feel free to create additional cells to test your hypotheses. Hint:\n\n* What does the error message say? What line seems to have problems?\n* Recall that whenever you assign a name, Python creates or changes that name. ","metadata":{"colab_type":"text","id":"IeojHwHzVTpI"},"pos":53,"type":"cell"}
{"cell_type":"markdown","id":"8b5e30","input":"**Your answer here**","metadata":{"colab_type":"text","id":"rIQ4Khm8VTpu"},"pos":69,"type":"cell"}
{"cell_type":"markdown","id":"8c95f9","input":"**Your answer here**","metadata":{"colab_type":"text","id":"wvbuUpRcVTpy"},"pos":81,"type":"cell"}
{"cell_type":"markdown","id":"8dd8ab","input":"The code would also work if you changed the value of `R` to `False`:","metadata":{"colab_type":"text","id":"7m0JcW5TqKd8"},"pos":106,"type":"cell"}
{"cell_type":"markdown","id":"8e9b95","input":"## Warm-up\n<a id=\"warm\"></a>\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"8edb7c","input":"Based on your work so far, which evidence should the student present to prove that the school's claim is false? Choose A, B, or C and explain your choice.\n\n**A.** That a leader of a national project attended the school and has still been a leader since his graduation.\n\n**B.** That a non-leader did not attend the school and later became a leader.\n\n**C.** That a non-leader attended the school, and there is enough evidence to show that she will never be a leader.","metadata":{"colab_type":"text","id":"WcjkH_P3VTpy"},"pos":82,"type":"cell"}
{"cell_type":"markdown","id":"916b73","input":"## Exercise 1. Exclusive Or (XOR)\n<a id=\"ex1\"></a>","metadata":{"colab_type":"text","id":"S5MP1Y4RVTp0"},"pos":88,"type":"cell"}
{"cell_type":"markdown","id":"918e1d","input":"One of the two primary rules of DeMorgan's Law in formal logic is $\\neg$(P $\\vee$ Q) $\\iff$ $\\neg$P $\\wedge$ $\\neg$Q. What is the other rule? Feel free to refer to FA's pre-class readings if you forgot.","metadata":{"colab_type":"text","id":"JSvLwquAVTps"},"pos":66,"type":"cell"}
{"cell_type":"markdown","id":"91973a","input":"### 3.1. The use of DeMorgan's Law in negating conditionals\n<a id=\"negating\"></a>\n","metadata":{"colab_type":"text","id":"6mOxdRc0VTpu"},"pos":70,"type":"cell"}
{"cell_type":"markdown","id":"988f50","input":"**Your answer here**","metadata":{"colab_type":"text","id":"KsFju6EUVTpv"},"pos":75,"type":"cell"}
{"cell_type":"markdown","id":"9943ed","input":"<blockquote class=\"alert-warning\">\n     Key Takeaways from Today´s SSS:\n    <small><b>range()</b> is a built-in function, which creates a sequence of numbers which starts from <b>0</b></small>\n    <small>you can think of a function as of a <b>black magic box</b>, which can simplify your coding later</small>\n    <small>functions are usually <b>reused multiple times</b></small>\n    <small>EDIT THIS CELL TO ADD YOUR TAKEAWAY</small>\n    <small>scope refers to the <b>visibility</b> of variables</small>\n    <small><b>global variables</b> are the ones that are defined and declared <b>outside</b> a function</small>\n    </blockquote> ","pos":113,"type":"cell"}
{"cell_type":"markdown","id":"9a61b5","input":"<div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n<strong><h3>Welcome back!</h3></strong>\n</div>\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"a69bb1","input":"For future, try using Markdown CheatSheets which contain all the notations (Check out [this CheatSheet](https://www.ibm.com/support/knowledgecenter/en/SSGNPV_1.1.3/dsx/markd-jupyter.html) or [this one!](https://medium.com/ibm-data-science-experience/markdown-for-jupyter-notebooks-cheatsheet-386c05aeebed)).\n***\n\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"ad30a8","input":"**Your answer here**","metadata":{"colab_type":"text","id":"N5gLthdzVTpx"},"pos":79,"type":"cell"}
{"cell_type":"markdown","id":"b6a186","input":"**Your answer here:**","metadata":{"colab_type":"text","id":"z7f02wWTp2J_"},"pos":109,"type":"cell"}
{"cell_type":"markdown","id":"b9c9cc","input":"**There are a few crucial things to remember about it.**\n<blockquote class=\"panel-danger\">\n0. Since counting and indexing in Python ** start from 0**, the sequence provided by `range()` always starts with 0 too. \n<br/>\n1. `range(stop)` with only 1 argument returns a sequence which stops at a given argument _exluding it_ from the created sequence. So in the above example, '3' is not included in the sequence. We can examine it by using for loop that we learned the last time. Let's print each value of the sequence.\n</blockquote>","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"ba18f4","input":"By the way, you, using these concepts, are part of so-called functional programming, which is a widespread way to solve the problems in CS. \n\n<img class=\"img-responsive responsive-img\" src=\"https://cdn-images-1.medium.com/max/800/0*X2-yHGibmWx5pAWN.jpg\" alt=\"...\">\n","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"bcccfd","input":"## Exercise 4.  \nReplicate the following text in a Markdown cell.\n![markdown practice](images/markdownpractice.png)\n","pos":100,"type":"cell"}
{"cell_type":"markdown","id":"bfe4b8","input":"What if we want to create many lists with various ending points? Function may be helpful here. Study the below example.","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"c291a4","input":"***","pos":86,"type":"cell"}
{"cell_type":"markdown","id":"c5f69d","input":"**Your answer here**","metadata":{"colab_type":"text","id":"pHz_yKteVTpy"},"pos":83,"type":"cell"}
{"cell_type":"markdown","id":"c6d3f4","input":"***","pos":112,"type":"cell"}
{"cell_type":"markdown","id":"c771bd","input":"    <div class=\"alert alert-block alert-success\">\n<div class=\"col-md-2 col-lg-1 col-xs-6 col-sm-3\"> <img class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"></div>\n<strong>It was wonderful seeing you today! Come to the OH to learn more and just chat!</strong>\n<br> Also, Congrats on completing your SSS2! Do you have questions you astill confused about? Use the cell below to write any questions and we will try to address these on the next sessions or during OH.\n\nYou can be as precise as you want, e.g. 'I did not why else statement should not be included'\n</div>","pos":114,"type":"cell"}
{"cell_type":"markdown","id":"c9756a","input":"## 1. Range() function\n<a id=\"range\"></a>","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"c9de42","input":"How to make a bulleted list:\n\n* First item\n* Second item\n\nHow to make an ordered list\n\n1. First item\n2. Second item","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"cb9ccb","input":"Snake image looks fun! But how exactly did we add it here? Double-click the image to see what is behind!$^{1}$\n\n<br/>\n$^{1}$: To insert this image use <strong>![just some name for you to identify] (foldername/picture_name.png)</strong> or the following HTML code:\n<pre> &ltdiv &ltimg class=\"img-responsive responsive-img\" src=\"https://www.shareicon.net/data/512x512/2016/08/18/813877_snake_512x512.png\" alt=\"...\"&gt &lt/div&gt </pre>","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"cbff19","input":"If a variable is assigned outside functions (`def`'s), it is a **global** variable. In the above code, *`score` which is assigned **1 is global***, while *`score` within the function B, which is assigned **4 is local*** to that function.","metadata":{"colab_type":"text","id":"KFIUv2XCVTpF"},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"d86791","input":"Study the below examples and think what will be the output for them.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"d86adc","input":"Special characters or commands in LaTeX starts with backslash and name. For example `\\pi` gives you $\\pi$. You can find the most useful LaTeX commands here: [LaTeX Math for Undergrads](http://tug.ctan.org/info/undergradmath/undergradmath.pdf)  \n  \n**You may want to use there logical symbols in the next assignment:**\n\n* P implies Q:\n  * $P \\implies Q$ \n* Negation of P: \n  * $\\neg P$\n* P or Q: \n  * $P \\vee Q$ \n* P and Q: \n  * $P \\wedge Q$ \n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"dd1c6c","input":"One way to fix the error is to let Python know that the `score` variable you are going to use in function A is a reference to the global `score`. Doing this is very intuitive in Python. You just need to use the **`global`** statement:\n","metadata":{"colab_type":"text","id":"tVlU3kK3cdaT"},"pos":57,"type":"cell"}
{"cell_type":"markdown","id":"e03f4d","input":"The two cells below define two functions as well as stating what they are trying to achieve, but apparently they don't work properly. Modify the code to fix the errors. ","metadata":{"colab_type":"text","id":"NpZi60c1eKNA"},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"e5b14b","input":"🐍AA:  I changed the names of the functions to A, B and C because it is a little bit confusing when they are all named function A","pos":55,"type":"cell"}
{"cell_type":"markdown","id":"f1eddd","input":"### 2.2. Scope of the functions\n<a id=\"scope\"></a>","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"f2c6dd","input":"Use DeMorgan's law, negate that statement.","metadata":{"colab_type":"text","id":"s7KQPD9lVTpx"},"pos":80,"type":"cell"}
{"cell_type":"markdown","id":"f3e346","input":"🐍AA: Are the two lines above supposed to be there? If yes, what is their purpose?\n<br>\nSS: to divide between the sections","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"f42213","input":"Translate the argument into symbolic logic.","metadata":{"colab_type":"text","id":"j6hHbtg5VTpv"},"pos":74,"type":"cell"}
{"cell_type":"markdown","id":"f4e69f","input":"As you may notice, `range(3)` is a sequence of numbers `0, 1, 2`, which _does not include_ 3. ","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"f59438","input":"## 3. Revisiting Demorgan's law \n<a id=\"revisit\"></a>","metadata":{"colab_type":"text","id":"iZTQvT9eVTps"},"pos":65,"type":"cell"}
{"cell_type":"markdown","id":"f80917","input":"***","pos":64,"type":"cell"}
{"cell_type":"markdown","id":"f81e24","input":"#### Let's have a deeper look on how functions are created\n> **def** - indicates the beginning of function creation (or its_ _def_ _inition)\n<br>\n> **function_name**(*argument1, argument2....*) (in our case, **add_three(x)**) -  names a function and specifies the arguments that the user will _input_ in the future whenever it will be called again\n<br>\n> **indentation** is important! Anything that belongs to function definition should be indended by four spaces (which usually will be done automatically)\n<br>\n> **return something** - 'something' is what is an output in our black box and what is given as a result to a user \n\n","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"f9257e","input":"\n\nThis exercise is to help elucidate the above cases and demonstrate how Python exploits properties of logical operations to give **efficient** implementations (**#algorithms!**).  Below are two algorithms for evaluating operations `A and B` and `A or B`. \n\n**`A and B` evaluation**\n1. Examine A. If A is true, move to step 2. Otherwise, jump to step 4.\n2. Examine B. If B is true, jump to step 3. Otherwise, move to step 4.\n3. Return True, exit.\n4. Return False, exit.\n\n\n**`A or B` evaluation**\n1. Examine A. If A is true, move to step 3. Otherwise, jump to step 2.\n2. Examine B. If B is true, jump to step 3. Otherwise, move to step 4.\n3. Return True, exit.\n4. Return False, exit.\n\nExample: When evaluating `False and True`, because the value to the left-hand side of `and` is False, Python immediately returns False without the need to look at the other value on the right-hand side. Similarly, when evaluating `True or False`, because the value to the left-hand side of `or` is True, Python immediately returns True without the need to look at the other value on the right-hand side. These ways of evaluating `and` and `or`  are more efficient than the naive way of looking into the values on both sides of the operator and returning a truth table-based boolean value. \n\nFirst, take a moment to make sure you understand why the algorithms are correct. Then explain the \"strange cases\" introduced at the beginning of this exercise.\n\n\n","metadata":{"colab_type":"text","id":"Zu_5YH24VsNz"},"pos":108,"type":"cell"}
{"cell_type":"markdown","id":"fd9dd5","input":"\nUse this cell to replicate","pos":101,"type":"cell"}
{"cell_type":"markdown","id":"fe0431","input":"## 2. Functions \n<a id=\"function\"></a>\n### 2.1. Functions recap\n<a id=\"recap\"></a>","metadata":{"colab_type":"text","id":"mLNAWdq7VTo8"},"pos":32,"type":"cell"}
{"id":0,"time":1565934984714,"type":"user"}
{"last_load":1565934983897,"type":"file"}