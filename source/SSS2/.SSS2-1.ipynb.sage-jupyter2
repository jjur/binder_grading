{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":81825792},"metadata":{"colab":{"name":"SSS2.ipynb","provenance":[],"version":"0.3.2"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1562831899728,"exec_count":1,"id":"100275","input":"type('14')","kernel":"python3","output":{"0":{"data":{"text/plain":"str"},"exec_count":1}},"pos":16,"start":1562831899672,"state":"done","type":"cell"}
{"cell_type":"code","end":1562831915841,"exec_count":2,"id":"e8399b","input":"if (1 != 1):\n    print('1 is not 1')\nelse:\n    print('1 = 1')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"CfuDTM8VmXsE"},"output":{"0":{"name":"stdout","text":"1 = 1\n"}},"pos":20,"start":1562831915817,"state":"done","type":"cell"}
{"cell_type":"code","end":1562831924440,"exec_count":3,"id":"04d891","input":"if 1:\n    print('1 means True')\nelse:\n    print('1 means False')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"C0bioN9LmXsF"},"output":{"0":{"name":"stdout","text":"1 means True\n"}},"pos":21,"start":1562831924422,"state":"done","type":"cell"}
{"cell_type":"code","end":1562831930428,"exec_count":4,"id":"117d2e","input":"if 0:\n    print('0 means True')\nelse:\n    print('0 means False')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"tF-mOAn4mXsH"},"output":{"0":{"name":"stdout","text":"0 means False\n"}},"pos":22,"start":1562831930420,"state":"done","type":"cell"}
{"cell_type":"code","end":1562831994427,"exec_count":7,"id":"aabcd7","input":"students_grade = 2.7\nif students_grade <= 2.5:\n    print(\"This student needs more academic support.\")","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"EHc_-hGumXsJ"},"pos":24,"start":1562831994421,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832028995,"exec_count":9,"id":"e531f4","input":"def implication(P, Q):\n    if P == True and Q == True:\n        return True\n    elif P == True and Q == False:\n        return False\n    else:\n        return True\n    \nprint(implication(True, False))\n","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"DOjhqpoISCni"},"output":{"0":{"name":"stdout","text":"False\n"}},"pos":32,"start":1562832028984,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832058818,"exec_count":10,"id":"efc05e","input":"for i in [True, False]:\n    print(not i)","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"vcHpHRfBILqg"},"output":{"0":{"name":"stdout","text":"False\nTrue\n"}},"pos":43,"start":1562832058808,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832063140,"exec_count":11,"id":"cea9fd","input":"for item in ['a','b','c','d','e','f','g','h']:\n    print('Hello')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"3qSlq6D0IMKd"},"output":{"0":{"name":"stdout","text":"Hello\nHello\nHello\nHello\nHello\nHello\nHello\nHello\n"}},"pos":44,"start":1562832063128,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832097226,"exec_count":12,"id":"c8bb83","input":"for i in range(6):\n    print('Hello')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"n11oUCFAI01j"},"output":{"0":{"name":"stdout","text":"Hello\nHello\nHello\nHello\nHello\nHello\n"}},"pos":51,"start":1562832097213,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832099624,"exec_count":13,"id":"82d745","input":"for item in ['a','b','c','d','e']:\n    print('Hello')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"FmORZ0xIIyU2","outputId":"29732f50-6e50-4663-e681-53aa1819f5cc"},"output":{"0":{"name":"stdout","text":"Hello\nHello\nHello\nHello\nHello\n"}},"pos":50,"start":1562832099614,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832507233,"exec_count":19,"id":"93649c","input":"absences = 1\nfeeling = 'not tired' \n\nif absences==0:\n    print('go to class')\nelif absences>=1 and feeling=='not tired':\n    print('go to class')\nelse:\n    print('do not go')\n############################################################################################\n#  TODO: Write code that reflects the above rules (i.e., print a decision based on the     #\n#  values of the variables absences and feeling. The variable absences indicates the       #\n#  number of permitted absences. The variable feeling indicate the feeling you are having. #\n#  Your code should use the if-elif-else structure.                                        #\n############################################################################################","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"UKGFD5kq9VlD"},"output":{"0":{"name":"stdout","text":"go to class\n"}},"pos":64,"start":1562832507220,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832572028,"exec_count":22,"id":"42fb2e","input":"for i in range(100):\n    print('I will be coming to SSS and study productively')","kernel":"python3","metadata":{"colab":{},"colab_type":"code","id":"46vr_1z_mXs9"},"output":{"0":{"name":"stdout","text":"I will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\nI will be coming to SSS and study productively\n"}},"pos":66,"start":1562832572015,"state":"done","type":"cell"}
{"cell_type":"code","end":1562832751724,"exec_count":23,"id":"06f85c","input":"for i in range(1, 2024,1):\n    if i%7==0 and i%5==0:\n        print(i)","kernel":"python3","output":{"0":{"name":"stdout","text":"35\n70\n105\n140\n175\n210\n245\n280\n315\n350\n385\n420\n455\n490\n525\n560\n595\n630\n665\n700\n735\n770\n805\n840\n875\n910\n945\n980\n1015\n1050\n1085\n1120\n1155\n1190\n1225\n1260\n1295\n1330\n1365\n1400\n1435\n1470\n1505\n1540\n1575\n1610\n1645\n1680\n1715\n1750\n1785\n1820\n1855\n1890\n1925\n1960\n1995\n"}},"pos":70,"start":1562832751714,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"37f354","input":"print(\"this is a print statement\")\nprint('14') ","metadata":{"colab":{},"colab_type":"code","id":"E6rxIfrlmXr9","outputId":"fa3fe029-1795-4048-9da2-fc338501fd73"},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4a845e","input":"a = 6\nif a > 5:\n    print(\"Larger than 5\")\nelse:\n    print(\"Not larger than 5\")","metadata":{"colab":{},"colab_type":"code","id":"uYzAAQ9rmXsA","outputId":"e0b91eb0-6763-405a-a406-e1f6fc8ef9cd"},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9386e9","input":"print('John')\nprint('Katie')\nprint('Tom')","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":698,"status":"ok","timestamp":1534446286390,"user":{"displayName":"Quang Tran","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"103528044432244998451"},"user_tz":-420},"id":"r8lLpxkFIBWi","outputId":"48ab69dd-eca9-411b-8560-561e8ef00c5b"},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"93f2a8","input":"for natural_number in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n                       10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \n                       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, \n                       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n                       40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:\n    print(natural_number)","metadata":{"colab":{},"colab_type":"code","id":"Ejm69EikIVjO","outputId":"151aeecd-4db3-4474-d8ca-8ed4ac3cc404"},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ab86f8","input":"for student_name in ['John', 'Katie','Tom']:\n    print(student_name)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":857,"status":"ok","timestamp":1534446259297,"user":{"displayName":"Quang Tran","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"103528044432244998451"},"user_tz":-420},"id":"c386P-tfH3WD","outputId":"708c304a-0d49-4c87-8bd4-6b071ea4a7e6"},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f1f8bc","input":"for natural_number in range(50):\n    print(natural_number)","metadata":{"colab":{},"colab_type":"code","id":"kQkdqSQ2Ir3m","outputId":"a7e4926a-50ab-4870-be6f-033933fe6fb7"},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"13230a","input":"day = 'Sunday'\nif day=='Monday' or day=='Tuesday' or day=='Wednesday' or day=='Thursday':\n    print('Getting bored')\nelif day=='Friday':\n    print('Partying')\nelif day=='Saturday':\n    print('Picnicking')\nelse: \n    print('Preparing to get bored')","metadata":{"colab":{},"colab_type":"code","id":"wno0P4FpSCnh","outputId":"2e775c3e-d66f-4b18-fab8-7e40435086c5"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Preparing to get bored\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"7aa722","input":"24*19*60**2","metadata":{"colab":{},"colab_type":"code","id":"dJ-0gIT2mXrz","outputId":"8399e0d9-17c4-4ff6-98e0-4aae30c20e1c"},"output":{"0":{"data":{"text/plain":"1641600"},"exec_count":1,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"649f6b","input":"def printTruthTable():\n    # outputs a printed truth table for implication\n    print('a     b       | sentence1')\n    for a in [True,False]:\n        for b in [True,False]:\n               \t\t print(a, b,  '    ', implication(a,b))\n\nprintTruthTable()                  ","output":{"0":{"name":"stdout","output_type":"stream","text":"a     b       | sentence1\nTrue True      True\nTrue False      False\nFalse True      True\nFalse False      True\n"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"b91bab","input":"for A_team in ['Argentina', 'Austria']:\n    for B_team in ['Belgium', 'Brazil']:\n        print('There will be a match between', A_team, 'and', B_team)","metadata":{"colab":{},"colab_type":"code","id":"G1MW9GfPIMTP"},"output":{"0":{"name":"stdout","output_type":"stream","text":"There will be a match between Argentina and Belgium\nThere will be a match between Argentina and Brazil\nThere will be a match between Austria and Belgium\nThere will be a match between Austria and Brazil\n"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"08f5f0","input":"import math\nmath.factorial(52)","metadata":{"colab":{},"colab_type":"code","id":"G3gc0dwXmXr3","outputId":"663c052f-a412-421c-c263-f495fadd8a08"},"output":{"0":{"data":{"text/plain":"80658175170943878571660636856403766975289505440883277824000000000000"},"exec_count":2,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"08df21","input":"The natural language equivalent of the above lines of code is that for each name in the list (`['John','Katie','Tom']`), print that name. It is essentially the equivalent of the following lines of code:","metadata":{"colab_type":"text","id":"FNeGpfp_H97X"},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"0fd1db","input":"Congrats on completing your SSS2! Do you have questions you astill confused about? Use the cell below to write any questions and we will try to address these on the next sessions or during OH.\n\nYou can be as precise as you want, e.g. 'I did not why else statement should not be included'","metadata":{"colab":{},"colab_type":"code","id":"-veXjEqsFVme"},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"10d2ff","input":"It turns out that Python `if` statement has a general form that includes one or more `elif`(else if) checks, and we could you this extra feature for our task:\n![elif code](images/elif_code.png)","metadata":{"colab_type":"text","id":"LspXeb1uSCng"},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"12f6da","input":"# B. Exercises\n<a id = 'ex'></a>","metadata":{"colab_type":"text","id":"QJGKvRbGSCn-"},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"177185","input":"Our task now is to write Python code that has the following flow of execution:\n![elif diagram ](images/elif_diagram.png)","metadata":{"colab_type":"text","id":"a-j8Mu3OSCng"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"1a573b","input":"# C. Optional Exercises\n<a id = 'opex'></a>","metadata":{"colab_type":"text","id":"CIGPUkxl69TL"},"pos":67,"type":"cell"}
{"cell_type":"markdown","id":"2e7faa","input":"Still pretty ugly. We had to write up all the first 50 natural numbers ourselves! Fortunately, Python has a function called ```range``` which will generate a list of numbers for iterations. The following code also prints the first 100 natural numbers:","metadata":{"colab_type":"text","id":"raTd5vN-IlEb"},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"3199e3","input":"Nested loops are just the loops that have a loop inside the loop.\nThe following loop includes two loops: outer and inner. It starts looping from 'Argentina' and then does loop over 'Austria' until it finished inner loop.","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"358eeb","input":"Now try changing `students_grade` to 2.2. and running the cell again. Is there anything printed out now?\n\n---","metadata":{"colab_type":"text","id":"pFajrpKPmXsM"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"3718e8","input":"## 1. IF STATEMENTS\n<a id=\"ifbig\"></a>\n### 1.1. Simple If statements\n<a id=\"simpleif\"></a>","metadata":{"colab_type":"text","id":"e6nz6oqFSCmi"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"3a96e1","input":"Any guesses on what this number means? \nIt is the (approximate) number of *seconds* you spent *already* at Minerva. Time flies, doesn't it? \n\n🐍AA: i changed the wording because it didn't make sense for me sometimes","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"455338","input":"*If you have time left, try these to!*","metadata":{"colab_type":"text","id":"ycuFRtmQFVmZ"},"pos":68,"type":"cell"}
{"cell_type":"markdown","id":"4b1000","input":"![MinionUrl](https://media2.giphy.com/media/l1J9urAfGd3grKV6E/giphy.gif?cid=790b76115d1dc82375795a53590029b5&rid=giphy.gif \"minion\")\n\n","metadata":{"colab_type":"text","id":"fdwHjFyemXrw"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"4b3810","input":"Imagine you have a list of a thousand students' names and you need to print those names. Without the help of an iteration tool like the ```for``` statement, you will have to manually print all of those names using a thousand lines of print statements. With the for statement, all will collapse into only 2 lines of code. Neat-o!","metadata":{"colab_type":"text","id":"WFqx-CvNIEa7"},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"4c1954","input":"Do you remember the data type of '14' from the previous week? (Hint: there are integers, floats, strings, bools....).\nHow do you check the data for their type? ","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"4d3531","input":"The word `import` here says: 'Could you find this library and import its content to my program, please?' to the computer network.\nAfter it is done, you are free to use any of the libraries' contents. In our case, we access `math.factorial(x)` function and use it to compute the 52!. ","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"501fc4","input":"## 2. FOR LOOPS \n<a id = 'for'></a>","metadata":{"colab_type":"text","id":"xlHLyj3NSCn5"},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"525046","input":"### 1.2. Adding more conditions with elif\n<a id=\"elif\"></a>","metadata":{"colab_type":"text","id":"2YVB6ASwmXsM"},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"5651f2","input":"##  Warm-up\n<a id=\"warm\"></a>\n\nRecall that last time you used Python as a Calculator and managed to compute some huge numbers with its help. For instance, to know the output of $19*24*(60^2)$ you can just use *math operators* and Python. The next cell implements it in Python.","metadata":{"colab_type":"text","id":"Bt3ZCpmLmXrx"},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"56c6dd","input":"## Pyramid building","metadata":{"colab_type":"text","id":"0rqF5j4VFVme"},"pos":71,"type":"cell"}
{"cell_type":"markdown","id":"5799de","input":"The following code checks what day in week it is and generates a corresponding message.","metadata":{"colab_type":"text","id":"SzH6XEdpSCnh"},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"587654","input":"---","metadata":{"colab_type":"text","id":"XO2jD99-mXsU"},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"5939ac","input":"---","metadata":{"colab_type":"text","id":"fF3i9xG7mXs3"},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"5cf5a2","input":"You are deciding whether to take an absence from the FA class this morning. Suppose at the moment the only two feelings you can have is `\"tired\"` or `\"not tired\"`. You have a special set of rules to follow in this decision-making process:\n* You will definitely go to class if you have no permitted absences left.\n* You will go to class if you have at least one permitted absences left and you are not feeling tired.\n* If you are feeling tired, and there is at least one permitted absences left, you won't go to class.\n\nUse the information above to complete the following question:","metadata":{"colab_type":"text","id":"OaE85KEP9SOw"},"pos":63,"type":"cell"}
{"cell_type":"markdown","id":"750b9e","input":"# 🐍 SSS2. Python Basics and #Deduction","metadata":{"colab_type":"text","id":"1bmdv457SCmc"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"7d09ca","input":"It's also worth mentioning that both `elif` and `else` are *optional* in Python \"if\" statement. So in the cell below, the message will be printed only if the condition is satisfied. Can you guess an output of this cell? Then run the cell and see! ","metadata":{"colab_type":"text","id":"K4si1zX1SCng"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"7e0c45","input":"### 2.2 Nested loops","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"8bba5c","input":"Create a function `build_even_pyramid` which receives a positive integer `n` as an argument and prints a pyramid of that level if `n` is even, and prints `\"n is not even\"` otherwise. For example,\n`build_even_pyramid(2)` should print:\n![Pyramid2](images/pyramid2.png)\n\n`build_even_pyramid(6)` should print:\n![Pyramid6](images/pyramid6.png)\n\n`build_even_pyramid(50)` should print:\n![Pyramid50](images/pyramid50.png)\n\n`build_even_pyramid(3)` should print:\n`n is not even`","metadata":{"colab_type":"text","id":"MC2XwKl_FVme"},"pos":72,"type":"cell"}
{"cell_type":"markdown","id":"8c365d","input":"🐍#1 (look in a chat)\nThis session will expand on the skills you learned in the last session. Along the way, you will have some practice with **#deduction** and some early practice with **#algorithms**. You will also see the magical power of **python libraries** and how to avoid writing the same thing over and over again with the help of **for loops**. Also, **If statements** will help you get a grasp of selection and conditioning in Python.","metadata":{"colab_type":"text","id":"QzGz9q0lSCmf"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"8ccaaa","input":"What if you want to print the first 50 (non-negative) whole numbers? (0,1,2,...,49)? You can certain do this:","metadata":{"colab_type":"text","id":"3UipT9wcISQL"},"pos":45,"type":"cell"}
{"cell_type":"markdown","id":"8e40a0","input":"# Table of Contents\n* [Warm-up](#warm)\n<br>\n<br>\n* **[A. Python Lab](#lab)**\n    * [1. IF STATEMENTS](#ifbig)\n        * [1.1. Simple if statements](#if)\n        * [1.2. Adding more conditions with elif](#elif)\n    * [2. FOR LOOPS](#for) \n<br>\n<br>\n* **[B. Exercise](#ex)**\n    * [Exercise 1](#ex1)\n    * [Exercise 2](#ex2)\n","metadata":{"colab_type":"text","id":"fkJ-5_5KSCme"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"90c5ce","input":"Note that ```range(50)``` contains 50 elements, but goes from 0 to 49 by default. We'll discuss more on the ```range``` function when we cover lists in an upcoming session. Rewrite the following `for` statement using `range`.","metadata":{"colab_type":"text","id":"R6W9ORDxIxJo"},"pos":49,"type":"cell"}
{"cell_type":"markdown","id":"942d96","input":"","pos":74,"type":"cell"}
{"cell_type":"markdown","id":"958aa7","input":"### Eye-break (optional)\nSteps: \n1. Prepare pen and paper;\n2. Find a group-mate who has got to this point in his/her notebook too; \n3. Give a pen and paper to the groupmate;\n4. Imagine that your *groupmate is a robot* and for now it only understands **for** and **if** statements, and **'go right/right 1 inch'**; \n5. Guide your robot in drawing a square on a piece of paper using only these commands.\n\nCan you draw a polygon with these commands too?\n","metadata":{"colab_type":"text","id":"Z0e-nSytn_EL"},"pos":60,"type":"cell"}
{"cell_type":"markdown","id":"9ed899","input":"Now using nested loop we can print the whole truth table.\n","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"9fa20e","input":"If you want to learn more about For loops check out [this DataCamp lesson](https://campus.datacamp.com/courses/intermediate-python-for-data-science/loops?ex=5) at home. ","metadata":{"colab_type":"text","id":"4ln92J17nXOo"},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"a39a7f","input":"What will ***`print(implication(True, False))`*** print, with ***`implication`*** defined below?\nUse the cell below to answer and then check your answer.","metadata":{"colab_type":"text","id":"TZMkmsk6SCni"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"a5cb4a","input":"Recall that last session you learned *print statements* that look like this: ","metadata":{"colab_type":"text","id":"f-gLfSwAmXr9"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"a7646f","input":"If you want to learn more about conditionals in Python check out  [this DataCamp lesson](https://campus.datacamp.com/courses/intermediate-python-for-data-science/logic-control-flow-and-filtering?ex=9) at home.","metadata":{"colab_type":"text","id":"PU0V1X5km4Ki"},"pos":34,"type":"cell"}
{"cell_type":"markdown","id":"ad2dd3","input":"You have already encountered this concept today in a class to print truth tables for various sentences. \n\nLet's do a revision of it and print the truth table for `implication(P, Q)` that we have defined earlier as follows:\n```\ndef implication(P, Q):\n    if P == True and Q == True:\n        return True\n    elif P == True and Q == False:\n        return False\n    else:\n        return True\n\n```","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"bc3a3f","input":"We also sometimes wish to execute some lines of code over and over again, or repeat some pattern in our program. The ```for``` statement is one tool for such iterations. For example, to iterate over all the students' names and print those names:","metadata":{"colab_type":"text","id":"DsxdalSbHzak"},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"bd676b","input":"There are other types of statements in Python too!\n\nSometimes we wish to execute some lines of code only if a condition is satisfied. **\"If\" statements** can help us with that. An **if statement** has the syntax as follows:\n![If-else code example](images/ifelse_code_example.png)\n\nRecall that boolean expressions are expressions that evaluate to boolean values (`True` or `False`). If the boolean expression evaluates to `True`, `STATEMENT 1` will be executed. If the boolean expression evaluates to `False`, `STATEMENT 2` will be executed. The diagram below depicts this flow of execution:\n![If-else diagram](images/ifelse_diagram.png)\n\nSeveral things to notice about the syntax:\n* There are colons at the end of the lines that contain `if` and `else`\n* The lines `STATEMENT 1` and `STATEMENT 2` have to be indented.\n\nThe cell below is the code to check whether a number `a` is larger than 5 and prints out a message accordingly.","metadata":{"colab_type":"text","id":"j8_-iKlWmXsA"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"bd87bd","input":"# A. Python Lab\n<a id=\"lab\"></a>","metadata":{"colab_type":"text","id":"SaPVNLznSCmh"},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"c4319b","input":"For each of the 3 cells below, guess what will happen when you uncomment and run it, then actually run it to check your answer. ","metadata":{"colab_type":"text","id":"7o44p-2MmXsD"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"ce9574","input":"Uncomment the following cells and guess what each of them do. \n\nP.S. (press \"command+/\" on Mac)","metadata":{"colab_type":"text","id":"n4Osz-SmIJD6"},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"dec50b","input":"## Exercise 2. Back to old times\n<a id = 'ex2'></a>\n\nBack in old school times, some teachers were using endless line-writing on the blackboard to fix pupil's behavior. It was believed that repetition is key to memorization.\n![Pyramid2](images/blackboard.png)\n\nIn Python, writing 100 lines is not a huge deal! \n\nYour task is to give yourself a promise (e.g., \"I will be coming to SSS and study productively\") for these SSS sessions and print it out 100 times using For loops!\n\nP.S. Remember, it is a binding contract:)","metadata":{"colab_type":"text","id":"ffyrDu8cSCoC"},"pos":65,"type":"cell"}
{"cell_type":"markdown","id":"e44f42","input":"Now, recall what you did in the first week when you were calculating the *factorial* of 52 (or 52!). How can we calculate this number? \n\nWe can try this in Python, but for this, we would need to **import the math library**. \n\nTo make it easier for you to understand the concept of a library, let's take a real book library as an example. In real book library, you would usually look for information *that already exists* so that you can **reuse** book's information for your advantage and don't reinvent the wheel, right?\n\nThe same thing works with **software libraries**, which allow you to access and use *functions* already implemented by someone, thus preventing the loss of productive working hours in doing something that has already been done:) \n\nFor instance, Python's *Math Library* provides access to some standard math functions and constants in Python, which we can use throughout our code for more complex mathematical computation.","metadata":{"colab_type":"text","id":"LfwjR8Q7mXr3"},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"eb8566","input":"**Your answer here** False","metadata":{"colab_type":"text","id":"JoWSV7zIBGSN"},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"eeac15","input":"## Exercise 1. Decisions with `if-elif-else`\n<a id = 'ex1'></a>","metadata":{"colab_type":"text","id":"PWqm76Mq9IMV"},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"f95779","input":"And here you are! You just computed a *large* number of deck cards combinations with only 2 lines of code.\n\nFor future, if you want to see more magical powers of Python Math library, it is always a good idea to look at official [**Python Documentation**](https://docs.python.org/3/library/math.html). \n\n----","metadata":{"colab_type":"text","id":"0BvzLQavmXr7"},"pos":10,"type":"cell"}
{"cell_type":"raw","id":"8ed744","input":" Write a Python program to find those numbers which are divisible by both 7 and 5, between 1 and 2023 (both included).","pos":69,"type":"cell"}
{"end":1562831992222,"exec_count":6,"id":"3ab6db","input":"students_grade = 2.2\nif students_grade <= 2.5:\n    print(\"This student needs more academic support.\")","kernel":"python3","output":{"0":{"name":"stdout","text":"This student needs more academic support.\n"}},"pos":25.5,"start":1562831992214,"state":"done","type":"cell"}
{"end":1562833093152,"exec_count":29,"id":"6d8b9e","input":"def build_even_pyramid(n):\n    if n%2==0:\n        for i in range(n):\n            for j in range(0, i+1):\n                print(\"# \",end=\"\")\n            print(\"\\r\") \n    else:\n        print(\"n is not even\")\nbuild_even_pyramid(50)     ","kernel":"python3","output":{"0":{"name":"stdout","text":"# \r\n# # \r\n# # # \r\n# # # # \r\n# # # # # \r\n# # # # # # \r\n# # # # # # # \r\n# # # # # # # # \r\n# # # # # # # # # \r\n# # # # # # # # # # \r\n# # # # # # # # # # # \r\n# # # # # # # # # # # # \r\n# # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \r\n"}},"pos":72.5,"start":1562833093024,"state":"done","type":"cell"}
{"id":0,"time":1562831885141,"type":"user"}
{"last_load":1562831884451,"type":"file"}